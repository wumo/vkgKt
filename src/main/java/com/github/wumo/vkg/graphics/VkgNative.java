// Targeted by JavaCPP version unknown: DO NOT EDIT THIS FILE

package com.github.wumo.vkg.graphics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;


@Properties(
        value = @Platform(
                include = {"vkg/c/c_fpsmeter.h", "vkg/c/c_vec.h", "vkg/c/c_camera.h", "vkg/c/c_light.h", "vkg/c/c_primitive.h", "vkg/c/c_material.h", "vkg/c/c_mesh.h", "vkg/c/c_node.h", "vkg/c/c_model.h", "vkg/c/c_model_instance.h", "vkg/c/c_primitive_builder.h", "vkg/c/c_scene.h", "vkg/c/c_atmosphere.h", "vkg/c/c_shadowmap.h", "vkg/base/window/input.h", "vkg/c/c_panning_camera.h", "vkg/c/c_window.h", "vkg/base/call_frame_updater.hpp", "vkg/c/c_renderer.h"},
                preload = {},
                link = {"vkg"}
        ),
        target = "com.github.wumo.vkg.graphics.VkgNative"
)
public class VkgNative  {
    static { Loader.load(); }

// Parsed from vkg/c/c_fpsmeter.h

// #ifndef VKG_C_FPSMETER_HPP
// #define VKG_C_FPSMETER_HPP

// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

@Opaque public static class CFPSMeter extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CFPSMeter() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CFPSMeter(Pointer p) { super(p); }
}

public static native @Cast("uint32_t") int FPSMeterGetFPS(CFPSMeter fpsMeter);
public static native double FPSMeterGetFrameTime(CFPSMeter fpsMeter);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_FPSMETER_HPP


// Parsed from vkg/c/c_vec.h

// #ifndef VKG_C_VEC_HPP
// #define VKG_C_VEC_HPP

// #include <cstdint>
// #ifdef __cplusplus
// #endif

@MemberGetter public static native @Cast("const uint32_t") int CNullIdx();
public static final int CNullIdx = CNullIdx();

public static class CUintRange extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CUintRange() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CUintRange(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CUintRange(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CUintRange position(long position) {
        return (CUintRange)super.position(position);
    }

  public native @Cast("uint32_t") int start(); public native CUintRange start(int setter);
  public native @Cast("uint32_t") int size(); public native CUintRange size(int setter);
}
public static class cvec2 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public cvec2() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public cvec2(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public cvec2(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public cvec2 position(long position) {
        return (cvec2)super.position(position);
    }

  public native float x(); public native cvec2 x(float setter);
  public native float y(); public native cvec2 y(float setter);
}
public static class cvec3 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public cvec3() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public cvec3(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public cvec3(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public cvec3 position(long position) {
        return (cvec3)super.position(position);
    }

  public native float x(); public native cvec3 x(float setter);
  public native float y(); public native cvec3 y(float setter);
  public native float z(); public native cvec3 z(float setter);
}
public static class cvec4 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public cvec4() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public cvec4(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public cvec4(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public cvec4 position(long position) {
        return (cvec4)super.position(position);
    }

  public native float x(); public native cvec4 x(float setter);
  public native float y(); public native cvec4 y(float setter);
  public native float z(); public native cvec4 z(float setter);
  public native float w(); public native cvec4 w(float setter);
}
public static class cmat3 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public cmat3() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public cmat3(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public cmat3(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public cmat3 position(long position) {
        return (cmat3)super.position(position);
    }

  public native @ByRef cvec3 c1(); public native cmat3 c1(cvec3 setter);
  public native @ByRef cvec3 c2(); public native cmat3 c2(cvec3 setter);
  public native @ByRef cvec3 c3(); public native cmat3 c3(cvec3 setter);
}
public static class cmat4 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public cmat4() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public cmat4(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public cmat4(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public cmat4 position(long position) {
        return (cmat4)super.position(position);
    }

  public native @ByRef cvec4 c1(); public native cmat4 c1(cvec4 setter);
  public native @ByRef cvec4 c2(); public native cmat4 c2(cvec4 setter);
  public native @ByRef cvec4 c3(); public native cmat4 c3(cvec4 setter);
  public native @ByRef cvec4 c4(); public native cmat4 c4(cvec4 setter);
}

public static class ctransform extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ctransform() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ctransform(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ctransform(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ctransform position(long position) {
        return (ctransform)super.position(position);
    }

  public native @ByRef cvec3 translation(); public native ctransform translation(cvec3 setter);
  public native @ByRef cvec3 scale(); public native ctransform scale(cvec3 setter);
  public native @ByRef cvec4 rotation(); public native ctransform rotation(cvec4 setter);
}

public static class caabb extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public caabb() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public caabb(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public caabb(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public caabb position(long position) {
        return (caabb)super.position(position);
    }

  public native @ByRef cvec3 min(); public native caabb min(cvec3 setter);
  public native @ByRef cvec3 max(); public native caabb max(cvec3 setter);
}

public static native void AABBMergePoint(caabb aabb, cvec3 p, @Cast("uint32_t") int offset);
public static native void AABBMergePoint(@Cast("caabb*") float[] aabb, @Cast("cvec3*") float[] p, @Cast("uint32_t") int offset);
public static native void AABBMergeAABB(caabb aabb, caabb other);
public static native void AABBMergeAABB(@Cast("caabb*") float[] aabb, @Cast("caabb*") float[] other);
public static native void AABBTransformMatrix(caabb aabb, cmat4 matrix, @Cast("uint32_t") int offset);
public static native void AABBTransformMatrix(@Cast("caabb*") float[] aabb, @Cast("cmat4*") float[] matrix, @Cast("uint32_t") int offset);
public static native void AABBTransform(caabb aabb, ctransform transform);
public static native void AABBTransform(@Cast("caabb*") float[] aabb, @Cast("ctransform*") float[] transform);

// #ifdef __cplusplus
// #endif

// #endif //VKG_C_VEC_HPP


// Parsed from vkg/c/c_camera.h

// #ifndef VKG_C_CAMERA_H
// #define VKG_C_CAMERA_H
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

@Opaque public static class CCamera extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CCamera() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CCamera(Pointer p) { super(p); }
}

public static native void CameraGetLocation(CCamera camera, cvec3 location, @Cast("uint32_t") int offset_float);
public static native void CameraGetLocation(CCamera camera, @Cast("cvec3*") float[] location, @Cast("uint32_t") int offset_float);
public static native void CameraSetLocation(CCamera camera, cvec3 location, @Cast("uint32_t") int offset_float);
public static native void CameraSetLocation(CCamera camera, @Cast("cvec3*") float[] location, @Cast("uint32_t") int offset_float);
public static native void CameraGetDirection(CCamera camera, cvec3 direction, @Cast("uint32_t") int offset_float);
public static native void CameraGetDirection(CCamera camera, @Cast("cvec3*") float[] direction, @Cast("uint32_t") int offset_float);
public static native void CameraSetDirection(CCamera camera, cvec3 direction, @Cast("uint32_t") int offset_float);
public static native void CameraSetDirection(CCamera camera, @Cast("cvec3*") float[] direction, @Cast("uint32_t") int offset_float);
public static native void CameraGetWorldUp(CCamera camera, cvec3 worldUp, @Cast("uint32_t") int offset_float);
public static native void CameraGetWorldUp(CCamera camera, @Cast("cvec3*") float[] worldUp, @Cast("uint32_t") int offset_float);
public static native void CameraSetWorldUp(CCamera camera, cvec3 worldUp, @Cast("uint32_t") int offset_float);
public static native void CameraSetWorldUp(CCamera camera, @Cast("cvec3*") float[] worldUp, @Cast("uint32_t") int offset_float);
public static native float CameraGetZNear(CCamera camera);
public static native void CameraSetZNear(CCamera camera, float zNear);
public static native float CameraGetZFar(CCamera camera);
public static native void CameraSetZFar(CCamera camera, float zFar);
public static native float CameraGetFov(CCamera camera);
public static native @Cast("uint32_t") int CameraGetWidth(CCamera camera);
public static native @Cast("uint32_t") int CameraGetHeight(CCamera camera);
public static native void CameraGetView(CCamera camera, cmat4 view, @Cast("uint32_t") int offset_float);
public static native void CameraGetView(CCamera camera, @Cast("cmat4*") float[] view, @Cast("uint32_t") int offset_float);
public static native void CameraGetProj(CCamera camera, cmat4 proj, @Cast("uint32_t") int offset_float);
public static native void CameraGetProj(CCamera camera, @Cast("cmat4*") float[] proj, @Cast("uint32_t") int offset_float);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_CAMERA_H


// Parsed from vkg/c/c_light.h

// #ifndef VKG_C_LIGHT_H
// #define VKG_C_LIGHT_H
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

@Opaque public static class CScene extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CScene() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CScene(Pointer p) { super(p); }
}

public static native @Cast("uint32_t") int LightGetCount(CScene scene, @Cast("uint32_t") int id);
public static native void LightGetColor(CScene scene, @Cast("uint32_t") int id, cvec3 color, @Cast("uint32_t") int offset_float);
public static native void LightGetColor(CScene scene, @Cast("uint32_t") int id, @Cast("cvec3*") float[] color, @Cast("uint32_t") int offset_float);
public static native void LightSetColor(CScene scene, @Cast("uint32_t") int id, cvec3 color, @Cast("uint32_t") int offset_float);
public static native void LightSetColor(CScene scene, @Cast("uint32_t") int id, @Cast("cvec3*") float[] color, @Cast("uint32_t") int offset_float);
public static native void LightGetLocation(CScene scene, @Cast("uint32_t") int id, cvec3 location, @Cast("uint32_t") int offset_float);
public static native void LightGetLocation(CScene scene, @Cast("uint32_t") int id, @Cast("cvec3*") float[] location, @Cast("uint32_t") int offset_float);
public static native void LightSetLocation(CScene scene, @Cast("uint32_t") int id, cvec3 location, @Cast("uint32_t") int offset_float);
public static native void LightSetLocation(CScene scene, @Cast("uint32_t") int id, @Cast("cvec3*") float[] location, @Cast("uint32_t") int offset_float);
public static native float LightGetIntensity(CScene scene, @Cast("uint32_t") int id);
public static native void LightSetIntensity(CScene scene, @Cast("uint32_t") int id, float intensity);
public static native float LightGetRange(CScene scene, @Cast("uint32_t") int id);
public static native void LightSetRange(CScene scene, @Cast("uint32_t") int id, float range);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_LIGHT_H


// Parsed from vkg/c/c_primitive.h

// #ifndef VKG_C_PRIMITIVE_HPP
// #define VKG_C_PRIMITIVE_HPP
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #else
//   #include <stdbool.h>
// #endif

/** enum CPrimitiveTopology */
public static final long
  CPrimitiveTriangles = 1L,
  CPrimitiveLines = 2L,
  CPrimitiveProcedural = 3L,
  CPrimitivePatches = 4L;
@Opaque public static class CPrimitiveBuilder extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CPrimitiveBuilder() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CPrimitiveBuilder(Pointer p) { super(p); }
}

public static native @Cast("uint32_t") int PrimitiveGetCount(CScene scene, @Cast("uint32_t") int id);
public static native @Cast("CPrimitiveTopology") long PrimitiveGetTopology(CScene scene, @Cast("uint32_t") int id);
public static native @ByVal CUintRange PrimitiveGetIndex(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int idx);
public static native @ByVal CUintRange PrimitiveGetPosition(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int idx);
public static native @ByVal CUintRange PrimitiveGetNormal(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int idx);
public static native @ByVal CUintRange PrimitiveGetUV(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int idx);
public static native @ByVal caabb PrimitiveGetAABB(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int idx);
public static native void PrimitiveSetAABB(CScene scene, @Cast("uint32_t") int id, caabb aabb, @Cast("uint32_t") int idx);
public static native void PrimitiveSetAABB(CScene scene, @Cast("uint32_t") int id, @Cast("caabb*") float[] aabb, @Cast("uint32_t") int idx);

public static native void PrimitiveUpdate(
  CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int idx, cvec3 positions,
  @Cast("uint32_t") int position_offset_float, @Cast("uint32_t") int numPositions, cvec3 normals,
  @Cast("uint32_t") int normal_offset_float, @Cast("uint32_t") int numNormals, caabb aabb);
public static native void PrimitiveUpdate(
  CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int idx, @Cast("cvec3*") float[] positions,
  @Cast("uint32_t") int position_offset_float, @Cast("uint32_t") int numPositions, @Cast("cvec3*") float[] normals,
  @Cast("uint32_t") int normal_offset_float, @Cast("uint32_t") int numNormals, @Cast("caabb*") float[] aabb);

public static native void PrimitiveUpdateFromBuilder(
  CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int idx, CPrimitiveBuilder builder);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_PRIMITIVE_HPP


// Parsed from vkg/c/c_material.h

// #ifndef VKG_C_MATERIAL_H
// #define VKG_C_MATERIAL_H
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

/** enum CMaterialType */
public static final int
  /**BRDF without reflection trace*/
  CMaterialBRDF = 0x1,
  CMaterialBRDFSG = 0x2,
  /**BRDF with reflection trace*/
  CMaterialReflective = 0x4,
  /**BRDF with reflection trace and refraction trace*/
  CMaterialRefractive = 0x8,
  /**diffuse coloring*/
  CMaterialNone = 0x10,
  /**transparent color blending*/
  CMaterialTransparent = 0x20,
  /**terrain */
  CMaterialTerrain = 0x40;

public static native @Cast("uint32_t") int MaterialGetCount(CScene scene, @Cast("uint32_t") int id);
public static native @Cast("CMaterialType") int MaterialGetType(CScene scene, @Cast("uint32_t") int id);
public static native @Cast("uint32_t") int MaterialGetColorTex(CScene scene, @Cast("uint32_t") int id);
public static native void MaterialSetColorTex(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int colorTex);
public static native @Cast("uint32_t") int MaterialGetPbrTex(CScene scene, @Cast("uint32_t") int id);
public static native void MaterialSetPbrTex(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int pbrTex);
public static native @Cast("uint32_t") int MaterialGetNormalTex(CScene scene, @Cast("uint32_t") int id);
public static native void MaterialSetNormalTex(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int normalTex);
public static native @Cast("uint32_t") int MaterialGetOcclusionTex(CScene scene, @Cast("uint32_t") int id);
public static native void MaterialSetOcclusionTex(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int occlusionTex);
public static native @Cast("uint32_t") int MaterialGetEmissiveTex(CScene scene, @Cast("uint32_t") int id);
public static native void MaterialSetEmissiveTex(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int emissiveTex);
public static native void MaterialGetColorFactor(
  CScene scene, @Cast("uint32_t") int id, cvec4 colorFactor, @Cast("uint32_t") int offset_float);
public static native void MaterialGetColorFactor(
  CScene scene, @Cast("uint32_t") int id, @Cast("cvec4*") float[] colorFactor, @Cast("uint32_t") int offset_float);
public static native void MaterialSetColorFactor(
  CScene scene, @Cast("uint32_t") int id, cvec4 colorFactor, @Cast("uint32_t") int offset_float);
public static native void MaterialSetColorFactor(
  CScene scene, @Cast("uint32_t") int id, @Cast("cvec4*") float[] colorFactor, @Cast("uint32_t") int offset_float);
public static native void MaterialGetPbrFactor(
  CScene scene, @Cast("uint32_t") int id, cvec4 pbrFactor, @Cast("uint32_t") int offset_float);
public static native void MaterialGetPbrFactor(
  CScene scene, @Cast("uint32_t") int id, @Cast("cvec4*") float[] pbrFactor, @Cast("uint32_t") int offset_float);
public static native void MaterialSetPbrFactor(
  CScene scene, @Cast("uint32_t") int id, cvec4 pbrFactor, @Cast("uint32_t") int offset_float);
public static native void MaterialSetPbrFactor(
  CScene scene, @Cast("uint32_t") int id, @Cast("cvec4*") float[] pbrFactor, @Cast("uint32_t") int offset_float);
public static native float MaterialGetOcclusionStrength(CScene scene, @Cast("uint32_t") int id);
public static native void MaterialSetOcclusionStrength(CScene scene, @Cast("uint32_t") int id, float occlusionStrength);
public static native float MaterialGetAlphaCutoff(CScene scene, @Cast("uint32_t") int id);
public static native void MaterialSetAlphaCutoff(CScene scene, @Cast("uint32_t") int id, float alphaCutoff);
public static native void MaterialGetEmissiveFactor(
  CScene scene, @Cast("uint32_t") int id, cvec4 emissiveFactor, @Cast("uint32_t") int offset_float);
public static native void MaterialGetEmissiveFactor(
  CScene scene, @Cast("uint32_t") int id, @Cast("cvec4*") float[] emissiveFactor, @Cast("uint32_t") int offset_float);
public static native void MaterialSetEmissiveFactor(
  CScene scene, @Cast("uint32_t") int id, cvec4 emissiveFactor, @Cast("uint32_t") int offset_float);
public static native void MaterialSetEmissiveFactor(
  CScene scene, @Cast("uint32_t") int id, @Cast("cvec4*") float[] emissiveFactor, @Cast("uint32_t") int offset_float);
public static native @Cast("uint32_t") int MaterialGetHeightTex(CScene scene, @Cast("uint32_t") int id);
public static native void MaterialSetHeightTex(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int heightTex);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_MATERIAL_H


// Parsed from vkg/c/c_mesh.h

// #ifndef VKG_C_MESH_H
// #define VKG_C_MESH_H

// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

public static native @Cast("uint32_t") int MeshGetPrimitive(CScene scene, @Cast("uint32_t") int id);
public static native @Cast("uint32_t") int MeshGetMaterial(CScene scene, @Cast("uint32_t") int id);

// #ifdef __cplusplus
// #endif

// #endif //VKG_C_MESH_H


// Parsed from vkg/c/c_node.h

// #ifndef VKG_C_NODE_H
// #define VKG_C_NODE_H
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

public static native @Cast("uint32_t") int NodeNameLength(CScene scene, @Cast("uint32_t") int id);
public static native void NodeGetName(CScene scene, @Cast("uint32_t") int id, @Cast("char*") BytePointer buf);
public static native void NodeGetName(CScene scene, @Cast("uint32_t") int id, @Cast("char*") ByteBuffer buf);
public static native void NodeGetName(CScene scene, @Cast("uint32_t") int id, @Cast("char*") byte[] buf);
public static native void NodeSetName(CScene scene, @Cast("uint32_t") int id, @Cast("char*") BytePointer buf, @Cast("uint32_t") int size);
public static native void NodeSetName(CScene scene, @Cast("uint32_t") int id, @Cast("char*") ByteBuffer buf, @Cast("uint32_t") int size);
public static native void NodeSetName(CScene scene, @Cast("uint32_t") int id, @Cast("char*") byte[] buf, @Cast("uint32_t") int size);
public static native void NodeGetTransform(CScene scene, @Cast("uint32_t") int id, ctransform transform);
public static native void NodeGetTransform(CScene scene, @Cast("uint32_t") int id, @Cast("ctransform*") float[] transform);
public static native void NodeSetTransform(CScene scene, @Cast("uint32_t") int id, ctransform transform);
public static native void NodeSetTransform(CScene scene, @Cast("uint32_t") int id, @Cast("ctransform*") float[] transform);
public static native @Cast("uint32_t") int NodeNumMeshes(CScene scene, @Cast("uint32_t") int id);
public static native void NodeGetMeshes(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntPointer meshes);
public static native void NodeGetMeshes(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntBuffer meshes);
public static native void NodeGetMeshes(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") int[] meshes);
public static native void NodeAddMeshes(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntPointer meshes, @Cast("uint32_t") int numMeshes);
public static native void NodeAddMeshes(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntBuffer meshes, @Cast("uint32_t") int numMeshes);
public static native void NodeAddMeshes(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") int[] meshes, @Cast("uint32_t") int numMeshes);
public static native @Cast("uint32_t") int NodeGetParent(CScene scene, @Cast("uint32_t") int id);
public static native @Cast("uint32_t") int NodeNumChildren(CScene scene, @Cast("uint32_t") int id);
public static native void NodeGetChildren(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntPointer children);
public static native void NodeGetChildren(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntBuffer children);
public static native void NodeGetChildren(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") int[] children);
public static native void NodeAddChildren(
  CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntPointer children, @Cast("uint32_t") int numChildren);
public static native void NodeAddChildren(
  CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntBuffer children, @Cast("uint32_t") int numChildren);
public static native void NodeAddChildren(
  CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") int[] children, @Cast("uint32_t") int numChildren);
public static native void NodeGetAABB(CScene scene, @Cast("uint32_t") int id, caabb aabb);
public static native void NodeGetAABB(CScene scene, @Cast("uint32_t") int id, @Cast("caabb*") float[] aabb);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_NODE_H


// Parsed from vkg/c/c_model.h

// #ifndef VKG_C_MODEL_H
// #define VKG_C_MODEL_H

// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

@Opaque public static class CAnimation extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CAnimation() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CAnimation(Pointer p) { super(p); }
}

public static native @Cast("uint32_t") int ModelNumNodes(CScene scene, @Cast("uint32_t") int id);
public static native void ModelGetNodes(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntPointer nodes);
public static native void ModelGetNodes(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntBuffer nodes);
public static native void ModelGetNodes(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t*") int[] nodes);
public static native void ModelGetAABB(CScene scene, @Cast("uint32_t") int id, caabb aabb);
public static native void ModelGetAABB(CScene scene, @Cast("uint32_t") int id, @Cast("caabb*") float[] aabb);
public static native @Cast("uint32_t") int ModelNumAnimations(CScene scene, @Cast("uint32_t") int id);
public static native CAnimation ModelGetAnimation(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int idx);

public static native void AnimationReset(CAnimation animation, @Cast("uint32_t") int idx);
public static native void AnimationResetAll(CAnimation animation);
public static native void AnimationAnimate(CAnimation animation, @Cast("uint32_t") int idx, float elapsedMs);
public static native void AnimationAnimateAll(CAnimation animation, float elapsedMs);

// #ifdef __cplusplus
// #endif

// #endif //VKG_C_MODEL_H


// Parsed from vkg/c/c_model_instance.h

// #ifndef VKG_C_MODEL_INSTANCE_H
// #define VKG_C_MODEL_INSTANCE_H

// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #else
//   #include <stdbool.h>
// #endif

public static native @Cast("uint32_t") int ModelInstanceGetCount(CScene scene, @Cast("uint32_t") int id);
public static native void ModelInstanceGetTransform(CScene scene, @Cast("uint32_t") int id, ctransform transform);
public static native void ModelInstanceGetTransform(CScene scene, @Cast("uint32_t") int id, @Cast("ctransform*") float[] transform);//TODO offset_float?
public static native void ModelInstanceSetTransform(CScene scene, @Cast("uint32_t") int id, ctransform transform);
public static native void ModelInstanceSetTransform(CScene scene, @Cast("uint32_t") int id, @Cast("ctransform*") float[] transform);
public static native @Cast("uint32_t") int ModelInstanceGetModel(CScene scene, @Cast("uint32_t") int id);
public static native @Cast("bool") boolean ModelInstanceGetVisible(CScene scene, @Cast("uint32_t") int id);
public static native void ModelInstanceSetVisible(CScene scene, @Cast("uint32_t") int id, @Cast("bool") boolean visible);
public static native void ModelInstanceChangeModel(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int model);
public static native @Cast("uint32_t") int ModelInstanceGetCustomMaterial(CScene scene, @Cast("uint32_t") int id);
public static native void ModelInstanceSetCustomMaterial(CScene scene, @Cast("uint32_t") int id, @Cast("uint32_t") int materialId);

// #ifdef __cplusplus
// #endif

// #endif //VKG_C_MODEL_INSTANCE_H


// Parsed from vkg/c/c_primitive_builder.h

// #ifndef VKG_C_PRIMITIVE_BUILDER_HPP
// #define VKG_C_PRIMITIVE_BUILDER_HPP

// #include <cstdint>
// #include "c_vec.h"
// #include "c_primitive.h"
// #ifdef __cplusplus
// #endif

public static native CPrimitiveBuilder NewPrimitiveBuilder();
public static native void DeletePrimitiveBuilder(CPrimitiveBuilder builder);

public static native void BuildNewPrimitive(CPrimitiveBuilder builder, @Cast("CPrimitiveTopology") long topology);

public static native void PrimitiveBuilderFrom(
  CPrimitiveBuilder builder, cvec3 positions, @Cast("uint32_t") int position_offset_float,
  @Cast("uint32_t") int numPositions, cvec3 normals, @Cast("uint32_t") int normal_offset_float,
  @Cast("uint32_t") int numNormals, cvec2 uvs, @Cast("uint32_t") int uv_offset_float, @Cast("uint32_t") int numUVs,
  @Cast("uint32_t*") IntPointer indices, @Cast("uint32_t") int numIndices);
public static native void PrimitiveBuilderFrom(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] positions, @Cast("uint32_t") int position_offset_float,
  @Cast("uint32_t") int numPositions, @Cast("cvec3*") float[] normals, @Cast("uint32_t") int normal_offset_float,
  @Cast("uint32_t") int numNormals, @Cast("cvec2*") float[] uvs, @Cast("uint32_t") int uv_offset_float, @Cast("uint32_t") int numUVs,
  @Cast("uint32_t*") IntBuffer indices, @Cast("uint32_t") int numIndices);
public static native void PrimitiveBuilderFrom(
  CPrimitiveBuilder builder, cvec3 positions, @Cast("uint32_t") int position_offset_float,
  @Cast("uint32_t") int numPositions, cvec3 normals, @Cast("uint32_t") int normal_offset_float,
  @Cast("uint32_t") int numNormals, cvec2 uvs, @Cast("uint32_t") int uv_offset_float, @Cast("uint32_t") int numUVs,
  @Cast("uint32_t*") int[] indices, @Cast("uint32_t") int numIndices);
public static native void PrimitiveBuilderFrom(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] positions, @Cast("uint32_t") int position_offset_float,
  @Cast("uint32_t") int numPositions, @Cast("cvec3*") float[] normals, @Cast("uint32_t") int normal_offset_float,
  @Cast("uint32_t") int numNormals, @Cast("cvec2*") float[] uvs, @Cast("uint32_t") int uv_offset_float, @Cast("uint32_t") int numUVs,
  @Cast("uint32_t*") IntPointer indices, @Cast("uint32_t") int numIndices);
public static native void PrimitiveBuilderFrom(
  CPrimitiveBuilder builder, cvec3 positions, @Cast("uint32_t") int position_offset_float,
  @Cast("uint32_t") int numPositions, cvec3 normals, @Cast("uint32_t") int normal_offset_float,
  @Cast("uint32_t") int numNormals, cvec2 uvs, @Cast("uint32_t") int uv_offset_float, @Cast("uint32_t") int numUVs,
  @Cast("uint32_t*") IntBuffer indices, @Cast("uint32_t") int numIndices);
public static native void PrimitiveBuilderFrom(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] positions, @Cast("uint32_t") int position_offset_float,
  @Cast("uint32_t") int numPositions, @Cast("cvec3*") float[] normals, @Cast("uint32_t") int normal_offset_float,
  @Cast("uint32_t") int numNormals, @Cast("cvec2*") float[] uvs, @Cast("uint32_t") int uv_offset_float, @Cast("uint32_t") int numUVs,
  @Cast("uint32_t*") int[] indices, @Cast("uint32_t") int numIndices);

public static native void BuildTriangle(
  CPrimitiveBuilder builder, cvec3 p1, @Cast("uint32_t") int p1_offset_float, cvec3 p2,
  @Cast("uint32_t") int p2_offset_float, cvec3 p3, @Cast("uint32_t") int p3_offset_float);
public static native void BuildTriangle(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] p1, @Cast("uint32_t") int p1_offset_float, @Cast("cvec3*") float[] p2,
  @Cast("uint32_t") int p2_offset_float, @Cast("cvec3*") float[] p3, @Cast("uint32_t") int p3_offset_float);
public static native void BuildRectangle(
  CPrimitiveBuilder builder, cvec3 center, @Cast("uint32_t") int center_offset_float, cvec3 x,
  @Cast("uint32_t") int x_offset_float, cvec3 y, @Cast("uint32_t") int y_offset_float);
public static native void BuildRectangle(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("uint32_t") int center_offset_float, @Cast("cvec3*") float[] x,
  @Cast("uint32_t") int x_offset_float, @Cast("cvec3*") float[] y, @Cast("uint32_t") int y_offset_float);
public static native void BuildGrid(
  CPrimitiveBuilder builder, @Cast("uint32_t") int nx, @Cast("uint32_t") int ny, cvec3 center,
  @Cast("uint32_t") int center_offset_float, cvec3 x, @Cast("uint32_t") int x_offset_float, cvec3 y,
  @Cast("uint32_t") int y_offset_float, float wx, float wy);
public static native void BuildGrid(
  CPrimitiveBuilder builder, @Cast("uint32_t") int nx, @Cast("uint32_t") int ny, @Cast("cvec3*") float[] center,
  @Cast("uint32_t") int center_offset_float, @Cast("cvec3*") float[] x, @Cast("uint32_t") int x_offset_float, @Cast("cvec3*") float[] y,
  @Cast("uint32_t") int y_offset_float, float wx, float wy);
public static native void BuildGridPatch(
  CPrimitiveBuilder builder, @Cast("uint32_t") int nx, @Cast("uint32_t") int ny, cvec3 center,
  @Cast("uint32_t") int center_offset_float, cvec3 x, @Cast("uint32_t") int x_offset_float, cvec3 y,
  @Cast("uint32_t") int y_offset_float, float wx, float wy);
public static native void BuildGridPatch(
  CPrimitiveBuilder builder, @Cast("uint32_t") int nx, @Cast("uint32_t") int ny, @Cast("cvec3*") float[] center,
  @Cast("uint32_t") int center_offset_float, @Cast("cvec3*") float[] x, @Cast("uint32_t") int x_offset_float, @Cast("cvec3*") float[] y,
  @Cast("uint32_t") int y_offset_float, float wx, float wy);
public static native void BuildCheckerboard(
  CPrimitiveBuilder builder, @Cast("uint32_t") int nx, @Cast("uint32_t") int ny, cvec3 center,
  @Cast("uint32_t") int center_offset_float, cvec3 x, @Cast("uint32_t") int x_offset_float, cvec3 y,
  @Cast("uint32_t") int y_offset_float, float wx, float wy);
public static native void BuildCheckerboard(
  CPrimitiveBuilder builder, @Cast("uint32_t") int nx, @Cast("uint32_t") int ny, @Cast("cvec3*") float[] center,
  @Cast("uint32_t") int center_offset_float, @Cast("cvec3*") float[] x, @Cast("uint32_t") int x_offset_float, @Cast("cvec3*") float[] y,
  @Cast("uint32_t") int y_offset_float, float wx, float wy);
public static native void BuildCircle(
  CPrimitiveBuilder builder, cvec3 center, @Cast("uint32_t") int center_offset_float, cvec3 z,
  @Cast("uint32_t") int z_offset_float, float R, int segments);
public static native void BuildCircle(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("uint32_t") int center_offset_float, @Cast("cvec3*") float[] z,
  @Cast("uint32_t") int z_offset_float, float R, int segments);
public static native void BuildSphere(
  CPrimitiveBuilder builder, cvec3 center, @Cast("uint32_t") int center_offset_float, float R,
  int nsubd);
public static native void BuildSphere(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("uint32_t") int center_offset_float, float R,
  int nsubd);
public static native void BuildBox(
  CPrimitiveBuilder builder, cvec3 center, @Cast("uint32_t") int center_offset_float, cvec3 x,
  @Cast("uint32_t") int x_offset_float, cvec3 y, @Cast("uint32_t") int y_offset_float, float z);
public static native void BuildBox(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("uint32_t") int center_offset_float, @Cast("cvec3*") float[] x,
  @Cast("uint32_t") int x_offset_float, @Cast("cvec3*") float[] y, @Cast("uint32_t") int y_offset_float, float z);
public static native void BuildBoxLine(
  CPrimitiveBuilder builder, cvec3 p1, @Cast("uint32_t") int p1_offset_float, cvec3 p2,
  @Cast("uint32_t") int p2_offset_float, cvec3 up, @Cast("uint32_t") int up_offset_float, float width,
  float height);
public static native void BuildBoxLine(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] p1, @Cast("uint32_t") int p1_offset_float, @Cast("cvec3*") float[] p2,
  @Cast("uint32_t") int p2_offset_float, @Cast("cvec3*") float[] up, @Cast("uint32_t") int up_offset_float, float width,
  float height);
public static native void BuildCone(
  CPrimitiveBuilder builder, cvec3 center, @Cast("uint32_t") int center_offset_float, cvec3 z,
  @Cast("uint32_t") int z_offset_float, float R, int segments);
public static native void BuildCone(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("uint32_t") int center_offset_float, @Cast("cvec3*") float[] z,
  @Cast("uint32_t") int z_offset_float, float R, int segments);
public static native void BuildCylinder(
  CPrimitiveBuilder builder, cvec3 center, @Cast("uint32_t") int center_offset_float, cvec3 z,
  @Cast("uint32_t") int z_offset_float, float R, @Cast("bool") boolean cap, int segments);
public static native void BuildCylinder(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("uint32_t") int center_offset_float, @Cast("cvec3*") float[] z,
  @Cast("uint32_t") int z_offset_float, float R, @Cast("bool") boolean cap, int segments);
public static native void BuildAxis(
  CPrimitiveBuilder builder, cvec3 center, @Cast("uint32_t") int center_offset_float, float length,
  float R, float capLength, int segments);
public static native void BuildAxis(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("uint32_t") int center_offset_float, float length,
  float R, float capLength, int segments);
public static native void BuildLine(
  CPrimitiveBuilder builder, cvec3 p1, @Cast("uint32_t") int p1_offset_float, cvec3 p2,
  @Cast("uint32_t") int p2_offset_float);
public static native void BuildLine(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] p1, @Cast("uint32_t") int p1_offset_float, @Cast("cvec3*") float[] p2,
  @Cast("uint32_t") int p2_offset_float);
public static native void BuildRectangleLine(
  CPrimitiveBuilder builder, cvec3 center, @Cast("uint32_t") int center_offset_float, cvec3 x,
  @Cast("uint32_t") int x_offset_float, cvec3 y, @Cast("uint32_t") int y_offset_float);
public static native void BuildRectangleLine(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("uint32_t") int center_offset_float, @Cast("cvec3*") float[] x,
  @Cast("uint32_t") int x_offset_float, @Cast("cvec3*") float[] y, @Cast("uint32_t") int y_offset_float);

public static native @Cast("uint32_t") int BuilderNumPrimitives(CPrimitiveBuilder builder);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_PRIMITIVE_BUILDER_HPP


// Parsed from vkg/c/c_scene.h

// #ifndef VKG_C_SCENE_H
// #define VKG_C_SCENE_H

// #include "c_primitive.h"
// #include "c_primitive_builder.h"
// #include "c_material.h"
// #include "c_mesh.h"
// #include "c_node.h"
// #include "c_model.h"
// #include "c_model_instance.h"
// #include "c_light.h"
// #include "c_camera.h"
// #include "c_atmosphere.h"
// #include "c_shadowmap.h"

// #ifdef __cplusplus
// #else
//   #include <stdbool.h>
// #endif

public static class CSceneConfig extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CSceneConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CSceneConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CSceneConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CSceneConfig position(long position) {
        return (CSceneConfig)super.position(position);
    }

  /** renderArea */
  public native int offsetX(); public native CSceneConfig offsetX(int setter);
  public native int offsetY(); public native CSceneConfig offsetY(int setter);
  public native @Cast("uint32_t") int extentW(); public native CSceneConfig extentW(int setter);
  public native @Cast("uint32_t") int extentH(); public native CSceneConfig extentH(int setter);
  public native @Cast("uint32_t") int layer(); public native CSceneConfig layer(int setter);

  /**max number of vertices and indices*/
  public native @Cast("uint32_t") int maxNumVertices(); public native CSceneConfig maxNumVertices(int setter);
  public native @Cast("uint32_t") int maxNumIndices(); public native CSceneConfig maxNumIndices(int setter);
  /**max number of node and instance transforms*/
  public native @Cast("uint32_t") int maxNumTransforms(); public native CSceneConfig maxNumTransforms(int setter);
  /**max number of materials*/
  public native @Cast("uint32_t") int maxNumMaterials(); public native CSceneConfig maxNumMaterials(int setter);
  /**max number of mesh instances*/
  public native @Cast("uint32_t") int maxNumPrimitives(); public native CSceneConfig maxNumPrimitives(int setter);
  public native @Cast("uint32_t") int maxNumMeshInstances(); public native CSceneConfig maxNumMeshInstances(int setter);
  /**max number of texture including 2d and cube map.*/
  public native @Cast("uint32_t") int maxNumTexture(); public native CSceneConfig maxNumTexture(int setter);
  /**max number of lights*/
  public native @Cast("uint32_t") int maxNumLights(); public native CSceneConfig maxNumLights(int setter);
}

public static native @Cast("uint32_t") int SceneNewPrimitive(
  CScene scene, cvec3 positions, @Cast("uint32_t") int position_offset_float, @Cast("uint32_t") int numPositions,
  cvec3 normals, @Cast("uint32_t") int normal_offset_float, @Cast("uint32_t") int numNormals, cvec2 uvs,
  @Cast("uint32_t") int uv_offset_float, @Cast("uint32_t") int numUVs, @Cast("uint32_t*") IntPointer indices, @Cast("uint32_t") int numIndices,
  caabb aabb, @Cast("CPrimitiveTopology") long topology, @Cast("bool") boolean perFrame);
public static native @Cast("uint32_t") int SceneNewPrimitive(
  CScene scene, @Cast("cvec3*") float[] positions, @Cast("uint32_t") int position_offset_float, @Cast("uint32_t") int numPositions,
  @Cast("cvec3*") float[] normals, @Cast("uint32_t") int normal_offset_float, @Cast("uint32_t") int numNormals, @Cast("cvec2*") float[] uvs,
  @Cast("uint32_t") int uv_offset_float, @Cast("uint32_t") int numUVs, @Cast("uint32_t*") IntBuffer indices, @Cast("uint32_t") int numIndices,
  @Cast("caabb*") float[] aabb, @Cast("CPrimitiveTopology") long topology, @Cast("bool") boolean perFrame);
public static native @Cast("uint32_t") int SceneNewPrimitive(
  CScene scene, cvec3 positions, @Cast("uint32_t") int position_offset_float, @Cast("uint32_t") int numPositions,
  cvec3 normals, @Cast("uint32_t") int normal_offset_float, @Cast("uint32_t") int numNormals, cvec2 uvs,
  @Cast("uint32_t") int uv_offset_float, @Cast("uint32_t") int numUVs, @Cast("uint32_t*") int[] indices, @Cast("uint32_t") int numIndices,
  caabb aabb, @Cast("CPrimitiveTopology") long topology, @Cast("bool") boolean perFrame);
public static native @Cast("uint32_t") int SceneNewPrimitive(
  CScene scene, @Cast("cvec3*") float[] positions, @Cast("uint32_t") int position_offset_float, @Cast("uint32_t") int numPositions,
  @Cast("cvec3*") float[] normals, @Cast("uint32_t") int normal_offset_float, @Cast("uint32_t") int numNormals, @Cast("cvec2*") float[] uvs,
  @Cast("uint32_t") int uv_offset_float, @Cast("uint32_t") int numUVs, @Cast("uint32_t*") IntPointer indices, @Cast("uint32_t") int numIndices,
  @Cast("caabb*") float[] aabb, @Cast("CPrimitiveTopology") long topology, @Cast("bool") boolean perFrame);
public static native @Cast("uint32_t") int SceneNewPrimitive(
  CScene scene, cvec3 positions, @Cast("uint32_t") int position_offset_float, @Cast("uint32_t") int numPositions,
  cvec3 normals, @Cast("uint32_t") int normal_offset_float, @Cast("uint32_t") int numNormals, cvec2 uvs,
  @Cast("uint32_t") int uv_offset_float, @Cast("uint32_t") int numUVs, @Cast("uint32_t*") IntBuffer indices, @Cast("uint32_t") int numIndices,
  caabb aabb, @Cast("CPrimitiveTopology") long topology, @Cast("bool") boolean perFrame);
public static native @Cast("uint32_t") int SceneNewPrimitive(
  CScene scene, @Cast("cvec3*") float[] positions, @Cast("uint32_t") int position_offset_float, @Cast("uint32_t") int numPositions,
  @Cast("cvec3*") float[] normals, @Cast("uint32_t") int normal_offset_float, @Cast("uint32_t") int numNormals, @Cast("cvec2*") float[] uvs,
  @Cast("uint32_t") int uv_offset_float, @Cast("uint32_t") int numUVs, @Cast("uint32_t*") int[] indices, @Cast("uint32_t") int numIndices,
  @Cast("caabb*") float[] aabb, @Cast("CPrimitiveTopology") long topology, @Cast("bool") boolean perFrame);
public static native void SceneNewPrimitives(
  CScene scene, CPrimitiveBuilder builder, @Cast("bool") boolean perFrame, @Cast("uint32_t*") IntPointer ptrs);
public static native void SceneNewPrimitives(
  CScene scene, CPrimitiveBuilder builder, @Cast("bool") boolean perFrame, @Cast("uint32_t*") IntBuffer ptrs);
public static native void SceneNewPrimitives(
  CScene scene, CPrimitiveBuilder builder, @Cast("bool") boolean perFrame, @Cast("uint32_t*") int[] ptrs);

public static native @Cast("uint32_t") int SceneNewMaterial(CScene scene, @Cast("CMaterialType") int type, @Cast("bool") boolean perFrame);
public static native @Cast("uint32_t") int SceneNewTexture(
  CScene scene, @Cast("char*") BytePointer pathBuf, @Cast("uint32_t") int pathSize, @Cast("bool") boolean mipmap);
public static native @Cast("uint32_t") int SceneNewTexture(
  CScene scene, @Cast("char*") ByteBuffer pathBuf, @Cast("uint32_t") int pathSize, @Cast("bool") boolean mipmap);
public static native @Cast("uint32_t") int SceneNewTexture(
  CScene scene, @Cast("char*") byte[] pathBuf, @Cast("uint32_t") int pathSize, @Cast("bool") boolean mipmap);
public static native @Cast("uint32_t") int SceneNewTextureFromBytes(
  CScene scene, @Cast("const char*") BytePointer bytes, @Cast("uint32_t") int numBytes, @Cast("uint32_t") int width, @Cast("uint32_t") int height,
  @Cast("bool") boolean mipmap);
public static native @Cast("uint32_t") int SceneNewTextureFromBytes(
  CScene scene, String bytes, @Cast("uint32_t") int numBytes, @Cast("uint32_t") int width, @Cast("uint32_t") int height,
  @Cast("bool") boolean mipmap);
public static native @Cast("uint32_t") int SceneNewMesh(CScene scene, @Cast("uint32_t") int primitive, @Cast("uint32_t") int material);
public static native @Cast("uint32_t") int SceneNewNode(CScene scene, ctransform transform);
public static native @Cast("uint32_t") int SceneNewNode(CScene scene, @Cast("ctransform*") float[] transform);
public static native @Cast("uint32_t") int SceneNewModel(CScene scene, @Cast("uint32_t*") IntPointer nodes, @Cast("uint32_t") int numNodes);
public static native @Cast("uint32_t") int SceneNewModel(CScene scene, @Cast("uint32_t*") IntBuffer nodes, @Cast("uint32_t") int numNodes);
public static native @Cast("uint32_t") int SceneNewModel(CScene scene, @Cast("uint32_t*") int[] nodes, @Cast("uint32_t") int numNodes);
public static native @Cast("uint32_t") int SceneLoadModel(
  CScene scene, @Cast("char*") BytePointer pathBuf, @Cast("uint32_t") int pathSize, @Cast("CMaterialType") int type);
public static native @Cast("uint32_t") int SceneLoadModel(
  CScene scene, @Cast("char*") ByteBuffer pathBuf, @Cast("uint32_t") int pathSize, @Cast("CMaterialType") int type);
public static native @Cast("uint32_t") int SceneLoadModel(
  CScene scene, @Cast("char*") byte[] pathBuf, @Cast("uint32_t") int pathSize, @Cast("CMaterialType") int type);
public static native @Cast("uint32_t") int SceneNewModelInstance(
  CScene scene, @Cast("uint32_t") int model, ctransform transform, @Cast("bool") boolean perFrame);
public static native @Cast("uint32_t") int SceneNewModelInstance(
  CScene scene, @Cast("uint32_t") int model, @Cast("ctransform*") float[] transform, @Cast("bool") boolean perFrame);
public static native @Cast("uint32_t") int SceneNewLight(CScene scene, @Cast("bool") boolean perFrame);

public static native CCamera SceneGetCamera(CScene scene);
public static native CAtmosphereSetting SceneGetAtmosphere(CScene scene);
public static native CShadowMapSetting SceneGetShadowmap(CScene scene);

// #ifdef __cplusplus
// #endif

// #endif //VKG_C_SCENE_H


// Parsed from vkg/c/c_atmosphere.h

// #ifndef VKG_C_ATMOSPHERE_H
// #define VKG_C_ATMOSPHERE_H

// #include "c_vec.h"

// #ifdef __cplusplus
// #else
//   #include <stdbool.h>
// #endif

@Opaque public static class CAtmosphereSetting extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CAtmosphereSetting() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CAtmosphereSetting(Pointer p) { super(p); }
}

public static native @Cast("bool") boolean AtmosphereIsEnabled(CAtmosphereSetting atmosphere);
public static native void AtmosphereEnable(CAtmosphereSetting atmosphere, @Cast("bool") boolean enabled);

public static native void AtmosphereGetSunDirection(
  CAtmosphereSetting atmosphere, cvec3 sunDirection, @Cast("uint32_t") int offset_float);
public static native void AtmosphereGetSunDirection(
  CAtmosphereSetting atmosphere, @Cast("cvec3*") float[] sunDirection, @Cast("uint32_t") int offset_float);
public static native void AtmosphereSetSunDirection(
  CAtmosphereSetting atmosphere, cvec3 sunDirection, @Cast("uint32_t") int offset_float);
public static native void AtmosphereSetSunDirection(
  CAtmosphereSetting atmosphere, @Cast("cvec3*") float[] sunDirection, @Cast("uint32_t") int offset_float);

public static native void AtmosphereGetEarthCenter(
  CAtmosphereSetting atmosphere, cvec3 earthCenter, @Cast("uint32_t") int offset_float);
public static native void AtmosphereGetEarthCenter(
  CAtmosphereSetting atmosphere, @Cast("cvec3*") float[] earthCenter, @Cast("uint32_t") int offset_float);
public static native void AtmosphereSetEarthCenter(
  CAtmosphereSetting atmosphere, cvec3 earthCenter, @Cast("uint32_t") int offset_float);
public static native void AtmosphereSetEarthCenter(
  CAtmosphereSetting atmosphere, @Cast("cvec3*") float[] earthCenter, @Cast("uint32_t") int offset_float);

public static native float AtmosphereGetSunIntensity(CAtmosphereSetting atmosphere);
public static native void AtmosphereSetSunIntensity(CAtmosphereSetting atmosphere, float intensity);

public static native float AtmosphereGetExposure(CAtmosphereSetting atmosphere);
public static native void AtmosphereSetExposure(CAtmosphereSetting atmosphere, float exposure);

public static native double AtmosphereGetSunAngularRadius(CAtmosphereSetting atmosphere);
public static native double AtmosphereGetSunSolidAngle(CAtmosphereSetting atmosphere);
public static native double AtmosphereGetLengthUnitInMeters(CAtmosphereSetting atmosphere);
public static native double AtmosphereGetBottomRadius(CAtmosphereSetting atmosphere);

// #ifdef __cplusplus
// #endif

// #endif //VKG_C_ATMOSPHERE_H


// Parsed from vkg/c/c_shadowmap.h

// #ifndef VKG_C_SHADOWMAP_HPP
// #define VKG_C_SHADOWMAP_HPP

// #include "c_vec.h"

// #ifdef __cplusplus
// #else
//   #include <stdbool.h>
// #endif

@Opaque public static class CShadowMapSetting extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CShadowMapSetting() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CShadowMapSetting(Pointer p) { super(p); }
}

public static native @Cast("bool") boolean ShadowMapIsEnabled(CShadowMapSetting shadowmap);
public static native void ShadowMapEnable(CShadowMapSetting shadowmap, @Cast("bool") boolean enabled);

public static native @Cast("uint32_t") int ShadowMapGetNumCascades(CShadowMapSetting shadowmap);
public static native void ShadowMapSetNumCascades(CShadowMapSetting shadowmap, @Cast("uint32_t") int numCascades);

public static native @Cast("uint32_t") int ShadowMapGetTextureSize(CShadowMapSetting shadowmap);
public static native void ShadowMapSetTextureSize(CShadowMapSetting shadowmap, @Cast("uint32_t") int textureSize);

public static native float ShadowMapGetZFar(CShadowMapSetting shadowmap);
public static native void ShadowMapSetZFar(CShadowMapSetting shadowmap, float zFar);

// #ifdef __cplusplus
// #endif

// #endif //VKG_C_SHADOWMAP_HPP


// Parsed from vkg/base/window/input.h

// #ifndef VKG_INPUT_H
// #define VKG_INPUT_H
// #include <cstdint>
// #ifdef __cplusplus
// #endif

/** enum MouseButton */
public static final int
  MouseButtonLeft = 0,
  MouseButtonRight = 1,
  MouseButtonMiddle = 2,
  MouseButtonLast = MouseButtonMiddle;

/** enum Key */
public static final int
  KeySPACE = 0,
  KeyAPOSTROPHE = 1, /* ' */
  KeyCOMMA = 2,      /* , */
  KeyMINUS = 3,      /* - */
  KeyPERIOD = 4,     /* . */
  KeySLASH = 5,      /* / */
  Key0 = 6,
  Key1 = 7,
  Key2 = 8,
  Key3 = 9,
  Key4 = 10,
  Key5 = 11,
  Key6 = 12,
  Key7 = 13,
  Key8 = 14,
  Key9 = 15,
  KeySEMICOLON = 16, /* ; */
  KeyEQUAL = 17,     /* = */
  KeyA = 18,
  KeyB = 19,
  KeyC = 20,
  KeyD = 21,
  KeyE = 22,
  KeyF = 23,
  KeyG = 24,
  KeyH = 25,
  KeyI = 26,
  KeyJ = 27,
  KeyK = 28,
  KeyL = 29,
  KeyM = 30,
  KeyN = 31,
  KeyO = 32,
  KeyP = 33,
  KeyQ = 34,
  KeyR = 35,
  KeyS = 36,
  KeyT = 37,
  KeyU = 38,
  KeyV = 39,
  KeyW = 40,
  KeyX = 41,
  KeyY = 42,
  KeyZ = 43,
  KeyLEFT_BRACKET = 44,  /* [ */
  KeyBACKSLASH = 45,     /* \ */
  KeyRIGHT_BRACKET = 46, /* ] */
  KeyGRAVE_ACCENT = 47,  /* ` */
  KeyWORLD_1 = 48,       /* non-US #1 */
  KeyWORLD_2 = 49,       /* non-US #2 */

  /* FunctionKeys */
  KeyESCAPE = 50,
  KeyENTER = 51,
  KeyTAB = 52,
  KeyBACKSPACE = 53,
  KeyINSERT = 54,
  KeyDELETE = 55,
  KeyRIGHT = 56,
  KeyLEFT = 57,
  KeyDOWN = 58,
  KeyUP = 59,
  KeyPAGE_UP = 60,
  KeyPAGE_DOWN = 61,
  KeyHOME = 62,
  KeyEND = 63,
  KeyCAPS_LOCK = 64,
  KeySCROLL_LOCK = 65,
  KeyNUM_LOCK = 66,
  KeyPRINT_SCREEN = 67,
  KeyPAUSE = 68,
  KeyF1 = 69,
  KeyF2 = 70,
  KeyF3 = 71,
  KeyF4 = 72,
  KeyF5 = 73,
  KeyF6 = 74,
  KeyF7 = 75,
  KeyF8 = 76,
  KeyF9 = 77,
  KeyF10 = 78,
  KeyF11 = 79,
  KeyF12 = 80,
  KeyF13 = 81,
  KeyF14 = 82,
  KeyF15 = 83,
  KeyF16 = 84,
  KeyF17 = 85,
  KeyF18 = 86,
  KeyF19 = 87,
  KeyF20 = 88,
  KeyF21 = 89,
  KeyF22 = 90,
  KeyF23 = 91,
  KeyF24 = 92,
  KeyF25 = 93,
  KeyKP_0 = 94,
  KeyKP_1 = 95,
  KeyKP_2 = 96,
  KeyKP_3 = 97,
  KeyKP_4 = 98,
  KeyKP_5 = 99,
  KeyKP_6 = 100,
  KeyKP_7 = 101,
  KeyKP_8 = 102,
  KeyKP_9 = 103,
  KeyKP_DECIMAL = 104,
  KeyKP_DIVIDE = 105,
  KeyKP_MULTIPLY = 106,
  KeyKP_SUBTRACT = 107,
  KeyKP_ADD = 108,
  KeyKP_ENTER = 109,
  KeyKP_EQUAL = 110,
  KeyLEFT_SHIFT = 111,
  KeyLEFT_CONTROL = 112,
  KeyLEFT_ALT = 113,
  KeyLEFT_SUPER = 114,
  KeyRIGHT_SHIFT = 115,
  KeyRIGHT_CONTROL = 116,
  KeyRIGHT_ALT = 117,
  KeyRIGHT_SUPER = 118,
  KeyMENU = 119,
  KeyLast = KeyMENU;

public static class Input extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public Input() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Input(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Input(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public Input position(long position) {
        return (Input)super.position(position);
    }

  public native int mousePosX(); public native Input mousePosX(int setter);
  public native int mousePosY(); public native Input mousePosY(int setter);
  public native double scrollXOffset(); public native Input scrollXOffset(double setter);
  public native double scrollYOffset(); public native Input scrollYOffset(double setter);
  public native @Cast("bool") boolean mouseButtonPressed(int i); public native Input mouseButtonPressed(int i, boolean setter);
  @MemberGetter public native @Cast("bool*") BoolPointer mouseButtonPressed();
  public native @Cast("bool") boolean keyPressed(int i); public native Input keyPressed(int i, boolean setter);
  @MemberGetter public native @Cast("bool*") BoolPointer keyPressed();
}

// #ifdef __cplusplus
// #endif
// #endif //VKG_INPUT_H

// Parsed from vkg/c/c_panning_camera.h

// #ifndef VKG_C_PANNING_CAMERA_H
// #define VKG_C_PANNING_CAMERA_H
// #include "vkg/base/window/input.h"
// #include "c_camera.h"
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

@Opaque public static class CPanningCamera extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CPanningCamera() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CPanningCamera(Pointer p) { super(p); }
}

public static native CPanningCamera NewPanningCamera(CCamera camera);
public static native void DeletePanningCamera(CPanningCamera camera);
public static native void PanningCameraUpdate(CPanningCamera camera, Input input);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_PANNING_CAMERA_H


// Parsed from vkg/c/c_window.h

// #ifndef VKG_C_WINDOW_H
// #define VKG_C_WINDOW_H

// #include "vkg/base/window/input.h"

// #include <cstdint>
// #ifdef __cplusplus
// #endif

@Opaque public static class CWindow extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CWindow() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CWindow(Pointer p) { super(p); }
}

public static native @Cast("uint32_t") int WindowGetWidth(CWindow window);
public static native @Cast("uint32_t") int WindowGetHeight(CWindow window);
public static native void WindowSetTitle(CWindow window, @Cast("char*") BytePointer titleBuf, @Cast("uint32_t") int size);
public static native void WindowSetTitle(CWindow window, @Cast("char*") ByteBuffer titleBuf, @Cast("uint32_t") int size);
public static native void WindowSetTitle(CWindow window, @Cast("char*") byte[] titleBuf, @Cast("uint32_t") int size);
public static native @Cast("uint32_t") int WindowGetTitleLength(CWindow window);
public static native void WindowGetTitle(CWindow window, @Cast("char*") BytePointer titleBuf);
public static native void WindowGetTitle(CWindow window, @Cast("char*") ByteBuffer titleBuf);
public static native void WindowGetTitle(CWindow window, @Cast("char*") byte[] titleBuf);
public static native Input WindowGetInput(CWindow window);

public static native int InputMousePosX(Input input);
public static native int InputMousePosY(Input input);
public static native double InputScrollOffsetX(Input input);
public static native double InputScrollOffsety(Input input);
public static native @Cast("bool") boolean InputMouseButtonPressed(Input input, @Cast("MouseButton") int btn);
public static native @Cast("bool") boolean InputKeyPressed(Input input, @Cast("Key") int key);

// #ifdef __cplusplus
// #endif

// #endif //VKG_C_WINDOW_H


// Parsed from vkg/base/call_frame_updater.hpp

// #pragma once

public static class CallFrameUpdater extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CallFrameUpdater() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CallFrameUpdater(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CallFrameUpdater(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CallFrameUpdater position(long position) {
        return (CallFrameUpdater)super.position(position);
    }

  @Virtual public native void update(@Cast("uint32_t") int frameIdx, double elapsedDuration);
}


// Parsed from vkg/c/c_renderer.h

// #ifndef VKG_C_RENDERER_H
// #define VKG_C_RENDERER_H
// #include "c_scene.h"
// #include "c_window.h"
// #include "c_fpsmeter.h"
// #include <cstdint>
// #ifdef __cplusplus
// #else
//   #include <stdbool.h>
// #endif

public static class CWindowConfig extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CWindowConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CWindowConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CWindowConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CWindowConfig position(long position) {
        return (CWindowConfig)super.position(position);
    }

  public native @Cast("const char*") BytePointer title(); public native CWindowConfig title(BytePointer setter);
  public native @Cast("uint32_t") int width(); public native CWindowConfig width(int setter);
  public native @Cast("uint32_t") int height(); public native CWindowConfig height(int setter);
}

public static class CFeatureConfig extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CFeatureConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CFeatureConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CFeatureConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CFeatureConfig position(long position) {
        return (CFeatureConfig)super.position(position);
    }

  public native @Cast("bool") boolean fullscreen(); public native CFeatureConfig fullscreen(boolean setter);
  public native @Cast("bool") boolean vsync(); public native CFeatureConfig vsync(boolean setter);
  public native @Cast("uint32_t") int numFrames(); public native CFeatureConfig numFrames(int setter);
  public native @Cast("bool") boolean rayTrace(); public native CFeatureConfig rayTrace(boolean setter);
}

@Opaque public static class CRenderer extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CRenderer() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CRenderer(Pointer p) { super(p); }
}

public static native CRenderer NewRenderer(@ByVal CWindowConfig windowConfig, @ByVal CFeatureConfig featureConfig);
public static native void DeleteRenderer(CRenderer renderer);

public static class CUpdater extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    CUpdater(Pointer p) { super(p); }
    protected CUpdater() { allocate(); }
    private native void allocate();
    public native void call(@Cast("uint32_t") int frameIdx, double elapsedMs, Pointer data);
}
public static native void RendererLoopFuncPtr(CRenderer renderer, CUpdater updater, Pointer data);

@Opaque public static class CCallFrameUpdater extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CCallFrameUpdater() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CCallFrameUpdater(Pointer p) { super(p); }
}
public static native void RendererLoopUpdater(CRenderer renderer, CCallFrameUpdater updater);

public static native CWindow RendererGetWindow(CRenderer renderer);

public static native CScene RendererAddScene(
  CRenderer renderer, @ByVal CSceneConfig sceneConfig, @Cast("char*") BytePointer nameBuf, @Cast("uint32_t") int size);
public static native CScene RendererAddScene(
  CRenderer renderer, @ByVal CSceneConfig sceneConfig, @Cast("char*") ByteBuffer nameBuf, @Cast("uint32_t") int size);
public static native CScene RendererAddScene(
  CRenderer renderer, @ByVal CSceneConfig sceneConfig, @Cast("char*") byte[] nameBuf, @Cast("uint32_t") int size);

public static native CFPSMeter RenderGetFPSMeter(CRenderer renderer);

// #ifdef __cplusplus
// #endif

// #endif //VKG_C_RENDERER_H


}
