// Targeted by JavaCPP version unknown: DO NOT EDIT THIS FILE

package com.github.wumo.vkg.graphics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;


@Properties(
        value = @Platform(
                include = {"c/c_vec.h", "c/c_camera.h", "c/c_light.h", "c/c_primitive.h", "c/c_material.h", "c/c_mesh.h", "c/c_node.h", "c/c_model.h", "c/c_model_instance.h", "c/c_primitive_builder.h", "c/c_scene_manager.h", "c/c_atmosphere.h", "vkez/window/input.h", "c/c_panning_camera.h", "c/c_window.h", "vkez/call_frame_updater.h", "c/c_renderer.h"},
                preload = {},
                link = {"vkg"}
        ),
        target = "com.github.wumo.vkg.graphics.VkgNative"
)
public class VkgNative  {
    static { Loader.load(); }

// Parsed from c/c_vec.h

// #ifndef VKG_C_VEC_H
// #define VKG_C_VEC_H
// #include <cstdint>
// #ifdef __cplusplus
// #endif

@MemberGetter public static native @Cast("const uint32_t") int CNullIdx();

public static class CUintRange extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CUintRange() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CUintRange(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CUintRange(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CUintRange position(long position) {
        return (CUintRange)super.position(position);
    }

  public native @Cast("uint32_t") int start(); public native CUintRange start(int setter);
  public native @Cast("uint32_t") int size(); public native CUintRange size(int setter);
}
public static class cvec2 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public cvec2() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public cvec2(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public cvec2(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public cvec2 position(long position) {
        return (cvec2)super.position(position);
    }

  public native float x(); public native cvec2 x(float setter);
  public native float y(); public native cvec2 y(float setter);
}
public static class cvec3 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public cvec3() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public cvec3(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public cvec3(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public cvec3 position(long position) {
        return (cvec3)super.position(position);
    }

  public native float x(); public native cvec3 x(float setter);
  public native float y(); public native cvec3 y(float setter);
  public native float z(); public native cvec3 z(float setter);
}
public static class cvec4 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public cvec4() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public cvec4(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public cvec4(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public cvec4 position(long position) {
        return (cvec4)super.position(position);
    }

  public native float x(); public native cvec4 x(float setter);
  public native float y(); public native cvec4 y(float setter);
  public native float z(); public native cvec4 z(float setter);
  public native float w(); public native cvec4 w(float setter);
}
public static class cmat3 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public cmat3() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public cmat3(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public cmat3(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public cmat3 position(long position) {
        return (cmat3)super.position(position);
    }

  public native @ByRef cvec3 c1(); public native cmat3 c1(cvec3 setter);
  public native @ByRef cvec3 c2(); public native cmat3 c2(cvec3 setter);
  public native @ByRef cvec3 c3(); public native cmat3 c3(cvec3 setter);
}
public static class cmat4 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public cmat4() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public cmat4(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public cmat4(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public cmat4 position(long position) {
        return (cmat4)super.position(position);
    }

  public native @ByRef cvec4 c1(); public native cmat4 c1(cvec4 setter);
  public native @ByRef cvec4 c2(); public native cmat4 c2(cvec4 setter);
  public native @ByRef cvec4 c3(); public native cmat4 c3(cvec4 setter);
  public native @ByRef cvec4 c4(); public native cmat4 c4(cvec4 setter);
}

public static class ctransform extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ctransform() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ctransform(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ctransform(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ctransform position(long position) {
        return (ctransform)super.position(position);
    }

  public native @ByRef cvec3 translation(); public native ctransform translation(cvec3 setter);
  public native @ByRef cvec3 scale(); public native ctransform scale(cvec3 setter);
  public native @ByRef cvec4 rotation(); public native ctransform rotation(cvec4 setter);
}

public static class caabb extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public caabb() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public caabb(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public caabb(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public caabb position(long position) {
        return (caabb)super.position(position);
    }

  public native @ByRef cvec3 min(); public native caabb min(cvec3 setter);
  public native @ByRef cvec3 max(); public native caabb max(cvec3 setter);
}

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_VEC_H


// Parsed from c/c_camera.h

// #ifndef VKG_C_CAMERA_H
// #define VKG_C_CAMERA_H
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

@Opaque public static class CCamera extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CCamera() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CCamera(Pointer p) { super(p); }
}

public static native void CameraGetLocation(CCamera camera, cvec3 location);
public static native void CameraGetLocation(CCamera camera, @Cast("cvec3*") float[] location);
public static native void CameraSetLocation(CCamera camera, cvec3 location);
public static native void CameraSetLocation(CCamera camera, @Cast("cvec3*") float[] location);
public static native void CameraGetDirection(CCamera camera, cvec3 direction);
public static native void CameraGetDirection(CCamera camera, @Cast("cvec3*") float[] direction);
public static native void CameraSetDirection(CCamera camera, cvec3 direction);
public static native void CameraSetDirection(CCamera camera, @Cast("cvec3*") float[] direction);
public static native void CameraGetWorldUp(CCamera camera, cvec3 worldUp);
public static native void CameraGetWorldUp(CCamera camera, @Cast("cvec3*") float[] worldUp);
public static native void CameraSetWorldUp(CCamera camera, cvec3 worldUp);
public static native void CameraSetWorldUp(CCamera camera, @Cast("cvec3*") float[] worldUp);
public static native float CameraGetZNear(CCamera camera);
public static native void CameraSetZNear(CCamera camera, float zNear);
public static native float CameraGetZFar(CCamera camera);
public static native void CameraSetZFar(CCamera camera, float zFar);
public static native @Cast("uint32_t") int CameraGetWidth(CCamera camera);
public static native @Cast("uint32_t") int CameraGetHeight(CCamera camera);
public static native void CameraGetView(CCamera camera, cmat4 view);
public static native void CameraGetView(CCamera camera, @Cast("cmat4*") float[] view);
public static native void CameraGetProj(CCamera camera, cmat4 proj);
public static native void CameraGetProj(CCamera camera, @Cast("cmat4*") float[] proj);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_CAMERA_H


// Parsed from c/c_light.h

// #ifndef VKG_C_LIGHT_H
// #define VKG_C_LIGHT_H
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

@Opaque public static class CSceneManager extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CSceneManager() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CSceneManager(Pointer p) { super(p); }
}

public static native void LightGetColor(CSceneManager scene, @Cast("uint32_t") int id, cvec3 color);
public static native void LightGetColor(CSceneManager scene, @Cast("uint32_t") int id, @Cast("cvec3*") float[] color);
public static native void LightSetColor(CSceneManager scene, @Cast("uint32_t") int id, cvec3 color);
public static native void LightSetColor(CSceneManager scene, @Cast("uint32_t") int id, @Cast("cvec3*") float[] color);
public static native void LightGetLocation(CSceneManager scene, @Cast("uint32_t") int id, cvec3 location);
public static native void LightGetLocation(CSceneManager scene, @Cast("uint32_t") int id, @Cast("cvec3*") float[] location);
public static native void LightSetLocation(CSceneManager scene, @Cast("uint32_t") int id, cvec3 location);
public static native void LightSetLocation(CSceneManager scene, @Cast("uint32_t") int id, @Cast("cvec3*") float[] location);
public static native float LightGetIntensity(CSceneManager scene, @Cast("uint32_t") int id);
public static native void LightSetIntensity(CSceneManager scene, @Cast("uint32_t") int id, float intensity);
public static native float LightGetRange(CSceneManager scene, @Cast("uint32_t") int id);
public static native void LightSetRange(CSceneManager scene, @Cast("uint32_t") int id, float range);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_LIGHT_H


// Parsed from c/c_primitive.h

// #ifndef VKG_C_PRIMITIVE_H
// #define VKG_C_PRIMITIVE_H
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #else
//   #include <stdbool.h>
// #endif

/** enum CPrimitiveTopology */
public static final long
  CPrimitiveTriangles = 1L,
  CPrimitiveLines = 2L,
  CPrimitiveProcedural = 3L,
  CPrimitivePatches = 4L;

public static native @ByVal CUintRange PrimitiveGetIndex(CSceneManager scene, @Cast("uint32_t") int id);
public static native @ByVal CUintRange PrimitiveGetPosition(CSceneManager scene, @Cast("uint32_t") int id);
public static native @ByVal CUintRange PrimitiveGetNormal(CSceneManager scene, @Cast("uint32_t") int id);
public static native @ByVal CUintRange PrimitiveGetUV(CSceneManager scene, @Cast("uint32_t") int id);
public static native @ByVal CUintRange PrimitiveGetJoin0(CSceneManager scene, @Cast("uint32_t") int id);
public static native @ByVal CUintRange PrimitiveGetWeight0(CSceneManager scene, @Cast("uint32_t") int id);
public static native @ByVal caabb PrimitiveGetAABB(CSceneManager scene, @Cast("uint32_t") int id);
public static native void PrimitiveSetAABB(CSceneManager scene, @Cast("uint32_t") int id, caabb aabb);
public static native void PrimitiveSetAABB(CSceneManager scene, @Cast("uint32_t") int id, @Cast("caabb*") float[] aabb);
public static native float PrimitiveGetTessLevel(CSceneManager scene, @Cast("uint32_t") int id);
public static native void PrimitiveSetTessLevel(CSceneManager scene, @Cast("uint32_t") int id, float tessLevel);
public static native @Cast("bool") boolean PrimitiveGetLod(CSceneManager scene, @Cast("uint32_t") int id);
public static native void PrimitiveSetLod(CSceneManager scene, @Cast("uint32_t") int id, @Cast("bool") boolean lod);
public static native @Cast("CPrimitiveTopology") long PrimitiveGetTopology(CSceneManager scene, @Cast("uint32_t") int id);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_PRIMITIVE_H


// Parsed from c/c_material.h

// #ifndef VKG_C_MATERIAL_H
// #define VKG_C_MATERIAL_H
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

/** enum CMaterialType */
public static final int
  /**BRDF without reflection trace*/
  CMaterialBRDF = 0x1,
  CMaterialBRDFSG = 0x2,
  /**BRDF with reflection trace*/
  CMaterialReflective = 0x4,
  /**BRDF with reflection trace and refraction trace*/
  CMaterialRefractive = 0x8,
  /**diffuse coloring*/
  CMaterialNone = 0x10,
  /**transparent color blending*/
  CMaterialTransparent = 0x20,
  /**terrain */
  CMaterialTerrain = 0x40;

public static native @Cast("uint32_t") int MaterialGetColorTex(CSceneManager scene, @Cast("uint32_t") int id);
public static native void MaterialSetColorTex(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t") int colorTex);
public static native @Cast("uint32_t") int MaterialGetPbrTex(CSceneManager scene, @Cast("uint32_t") int id);
public static native void MaterialSetPbrTex(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t") int pbrTex);
public static native @Cast("uint32_t") int MaterialGetNormalTex(CSceneManager scene, @Cast("uint32_t") int id);
public static native void MaterialSetNormalTex(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t") int normalTex);
public static native @Cast("uint32_t") int MaterialGetOcclusionTex(CSceneManager scene, @Cast("uint32_t") int id);
public static native void MaterialSetOcclusionTex(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t") int occlusionTex);
public static native @Cast("uint32_t") int MaterialGetEmissiveTex(CSceneManager scene, @Cast("uint32_t") int id);
public static native void MaterialSetEmissiveTex(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t") int emissiveTex);
public static native void MaterialGetColorFactor(CSceneManager scene, @Cast("uint32_t") int id, cvec4 colorFactor);
public static native void MaterialGetColorFactor(CSceneManager scene, @Cast("uint32_t") int id, @Cast("cvec4*") float[] colorFactor);
public static native void MaterialSetColorFactor(CSceneManager scene, @Cast("uint32_t") int id, cvec4 colorFactor);
public static native void MaterialSetColorFactor(CSceneManager scene, @Cast("uint32_t") int id, @Cast("cvec4*") float[] colorFactor);
public static native void MaterialGetPbrFactor(CSceneManager scene, @Cast("uint32_t") int id, cvec4 pbrFactor);
public static native void MaterialGetPbrFactor(CSceneManager scene, @Cast("uint32_t") int id, @Cast("cvec4*") float[] pbrFactor);
public static native void MaterialSetPbrFactor(CSceneManager scene, @Cast("uint32_t") int id, cvec4 pbrFactor);
public static native void MaterialSetPbrFactor(CSceneManager scene, @Cast("uint32_t") int id, @Cast("cvec4*") float[] pbrFactor);
public static native @Cast("uint32_t") int MaterialGetOcclusionStrength(CSceneManager scene, @Cast("uint32_t") int id);
public static native void MaterialSetOcclusionStrength(
  CSceneManager scene, @Cast("uint32_t") int id, float occlusionStrength);
public static native @Cast("uint32_t") int MaterialGetAlphaCutoff(CSceneManager scene, @Cast("uint32_t") int id);
public static native void MaterialSetAlphaCutoff(CSceneManager scene, @Cast("uint32_t") int id, float alphaCutoff);
public static native void MaterialGetEmissiveFactor(CSceneManager scene, @Cast("uint32_t") int id, cvec4 emissiveFactor);
public static native void MaterialGetEmissiveFactor(CSceneManager scene, @Cast("uint32_t") int id, @Cast("cvec4*") float[] emissiveFactor);
public static native void MaterialSetEmissiveFactor(CSceneManager scene, @Cast("uint32_t") int id, cvec4 emissiveFactor);
public static native void MaterialSetEmissiveFactor(CSceneManager scene, @Cast("uint32_t") int id, @Cast("cvec4*") float[] emissiveFactor);
public static native @Cast("uint32_t") int MaterialGetHeightTex(CSceneManager scene, @Cast("uint32_t") int id);
public static native void MaterialSetHeightTex(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t") int heightTex);
public static native @Cast("CMaterialType") int MaterialGetType(CSceneManager scene, @Cast("uint32_t") int id);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_MATERIAL_H


// Parsed from c/c_mesh.h

// #ifndef VKG_C_MESH_H
// #define VKG_C_MESH_H
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

public static native @Cast("uint32_t") int MeshGetPrimitive(CSceneManager scene, @Cast("uint32_t") int id);
public static native @Cast("uint32_t") int MeshGetMaterial(CSceneManager scene, @Cast("uint32_t") int id);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_MESH_H


// Parsed from c/c_node.h

// #ifndef VKG_C_NODE_H
// #define VKG_C_NODE_H
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

public static native void NodeGetTransform(CSceneManager scene, @Cast("uint32_t") int id, ctransform transform);
public static native void NodeGetTransform(CSceneManager scene, @Cast("uint32_t") int id, @Cast("ctransform*") float[] transform);
public static native void NodeSetTransform(CSceneManager scene, @Cast("uint32_t") int id, ctransform transform);
public static native void NodeSetTransform(CSceneManager scene, @Cast("uint32_t") int id, @Cast("ctransform*") float[] transform);
public static native @Cast("uint32_t") int NodeNumMeshes(CSceneManager scene, @Cast("uint32_t") int id);
public static native void NodeGetMeshes(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntPointer meshes);
public static native void NodeGetMeshes(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntBuffer meshes);
public static native void NodeGetMeshes(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") int[] meshes);
public static native void NodeAddMeshes(
  CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntPointer meshes, @Cast("uint32_t") int numMeshes);
public static native void NodeAddMeshes(
  CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntBuffer meshes, @Cast("uint32_t") int numMeshes);
public static native void NodeAddMeshes(
  CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") int[] meshes, @Cast("uint32_t") int numMeshes);
public static native @Cast("uint32_t") int NodeGetParent(CSceneManager scene, @Cast("uint32_t") int id);
public static native @Cast("uint32_t") int NodeNumChildren(CSceneManager scene, @Cast("uint32_t") int id);
public static native void NodeGetChildren(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntPointer children);
public static native void NodeGetChildren(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntBuffer children);
public static native void NodeGetChildren(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") int[] children);
public static native void NodeAddChildren(
  CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntPointer children, @Cast("uint32_t") int numChildren);
public static native void NodeAddChildren(
  CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntBuffer children, @Cast("uint32_t") int numChildren);
public static native void NodeAddChildren(
  CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") int[] children, @Cast("uint32_t") int numChildren);
public static native void NodeGetAABB(CSceneManager scene, @Cast("uint32_t") int id, caabb aabb);
public static native void NodeGetAABB(CSceneManager scene, @Cast("uint32_t") int id, @Cast("caabb*") float[] aabb);
// #ifdef __cplusplus
// #endif
// #endif //VKG_C_NODE_H


// Parsed from c/c_model.h

// #ifndef VKG_C_MODEL_H
// #define VKG_C_MODEL_H
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

@Opaque public static class CAnimation extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CAnimation() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CAnimation(Pointer p) { super(p); }
}

public static native @Cast("uint32_t") int ModelNumNodes(CSceneManager scene, @Cast("uint32_t") int id);
public static native void ModelGetNodes(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntPointer nodes);
public static native void ModelGetNodes(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") IntBuffer nodes);
public static native void ModelGetNodes(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t*") int[] nodes);
public static native void ModelGetAABB(CSceneManager scene, @Cast("uint32_t") int id, caabb aabb);
public static native void ModelGetAABB(CSceneManager scene, @Cast("uint32_t") int id, @Cast("caabb*") float[] aabb);
public static native @Cast("uint32_t") int ModelNumAnimations(CSceneManager scene, @Cast("uint32_t") int id);
public static native CAnimation ModelGetAnimation(CSceneManager scene, @Cast("uint32_t") int id, @Cast("uint32_t") int idx);

public static native void AnimationReset(CAnimation animation, @Cast("uint32_t") int idx);
public static native void AnimationResetAll(CAnimation animation);
public static native void AnimationAnimate(CAnimation animation, @Cast("uint32_t") int idx, float elapsedMs);
public static native void AnimationAnimateAll(CAnimation animation, float elapsedMs);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_MODEL_H


// Parsed from c/c_model_instance.h

// #ifndef VKG_C_MODEL_INSTANCE_H
// #define VKG_C_MODEL_INSTANCE_H
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #else
//   #include <stdbool.h>
// #endif

public static native void ModelInstanceGetTransform(CSceneManager scene, @Cast("uint32_t") int id, ctransform transform);
public static native void ModelInstanceGetTransform(CSceneManager scene, @Cast("uint32_t") int id, @Cast("ctransform*") float[] transform);
public static native void ModelInstanceSetTransform(CSceneManager scene, @Cast("uint32_t") int id, ctransform transform);
public static native void ModelInstanceSetTransform(CSceneManager scene, @Cast("uint32_t") int id, @Cast("ctransform*") float[] transform);
public static native @Cast("uint32_t") int ModelInstanceGetModel(CSceneManager scene, @Cast("uint32_t") int id);
public static native @Cast("bool") boolean ModelInstanceGetVisible(CSceneManager scene, @Cast("uint32_t") int id);
public static native void ModelInstanceSetVisible(CSceneManager scene, @Cast("uint32_t") int id, @Cast("bool") boolean visible);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_MODEL_INSTANCE_H


// Parsed from c/c_primitive_builder.h

// #ifndef VKG_C_PRIMITIVE_BUILDER_H
// #define VKG_C_PRIMITIVE_BUILDER_H

// #include <cstdint>
// #include "c_vec.h"
// #include "c_primitive.h"
// #ifdef __cplusplus
// #endif

@Opaque public static class CPrimitiveBuilder extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CPrimitiveBuilder() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CPrimitiveBuilder(Pointer p) { super(p); }
}

public static native CPrimitiveBuilder NewPrimitiveBuilder();
public static native void DeletePrimitiveBuilder(CPrimitiveBuilder builder);

public static native void BuildNewPrimitive(CPrimitiveBuilder builder, @Cast("CPrimitiveTopology") long topology);

public static native void BuildTriangle(CPrimitiveBuilder builder, cvec3 p1, cvec3 p2, cvec3 p3);
public static native void BuildTriangle(CPrimitiveBuilder builder, @Cast("cvec3*") float[] p1, @Cast("cvec3*") float[] p2, @Cast("cvec3*") float[] p3);
public static native void BuildRectangle(CPrimitiveBuilder builder, cvec3 center, cvec3 x, cvec3 y);
public static native void BuildRectangle(CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("cvec3*") float[] x, @Cast("cvec3*") float[] y);
public static native void BuildGrid(
  CPrimitiveBuilder builder, @Cast("uint32_t") int nx, @Cast("uint32_t") int ny, cvec3 center, cvec3 x, cvec3 y,
  float wx, float wy);
public static native void BuildGrid(
  CPrimitiveBuilder builder, @Cast("uint32_t") int nx, @Cast("uint32_t") int ny, @Cast("cvec3*") float[] center, @Cast("cvec3*") float[] x, @Cast("cvec3*") float[] y,
  float wx, float wy);
public static native void BuildGridPatch(
  CPrimitiveBuilder builder, @Cast("uint32_t") int nx, @Cast("uint32_t") int ny, cvec3 center, cvec3 x, cvec3 y,
  float wx, float wy);
public static native void BuildGridPatch(
  CPrimitiveBuilder builder, @Cast("uint32_t") int nx, @Cast("uint32_t") int ny, @Cast("cvec3*") float[] center, @Cast("cvec3*") float[] x, @Cast("cvec3*") float[] y,
  float wx, float wy);
public static native void BuildCheckerboard(
  CPrimitiveBuilder builder, @Cast("uint32_t") int nx, @Cast("uint32_t") int ny, cvec3 center, cvec3 x, cvec3 y,
  float wx, float wy);
public static native void BuildCheckerboard(
  CPrimitiveBuilder builder, @Cast("uint32_t") int nx, @Cast("uint32_t") int ny, @Cast("cvec3*") float[] center, @Cast("cvec3*") float[] x, @Cast("cvec3*") float[] y,
  float wx, float wy);
public static native void BuildCircle(
  CPrimitiveBuilder builder, cvec3 center, cvec3 z, float R, int segments);
public static native void BuildCircle(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("cvec3*") float[] z, float R, int segments);
public static native void BuildSphere(CPrimitiveBuilder builder, cvec3 center, float R, int nsubd);
public static native void BuildSphere(CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, float R, int nsubd);
public static native void BuildBox(CPrimitiveBuilder builder, cvec3 center, cvec3 x, cvec3 y, float z);
public static native void BuildBox(CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("cvec3*") float[] x, @Cast("cvec3*") float[] y, float z);
public static native void BuildCone(
  CPrimitiveBuilder builder, cvec3 center, cvec3 z, float R, int segments);
public static native void BuildCone(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("cvec3*") float[] z, float R, int segments);
public static native void BuildCylinder(
  CPrimitiveBuilder builder, cvec3 center, cvec3 z, float R, @Cast("bool") boolean cap, int segments);
public static native void BuildCylinder(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("cvec3*") float[] z, float R, @Cast("bool") boolean cap, int segments);
public static native void BuildAxis(
  CPrimitiveBuilder builder, cvec3 center, float length, float R, float capLength,
  int segments);
public static native void BuildAxis(
  CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, float length, float R, float capLength,
  int segments);
public static native void BuildLine(CPrimitiveBuilder builder, cvec3 p1, cvec3 p2);
public static native void BuildLine(CPrimitiveBuilder builder, @Cast("cvec3*") float[] p1, @Cast("cvec3*") float[] p2);
public static native void BuildRectangleLine(CPrimitiveBuilder builder, cvec3 center, cvec3 x, cvec3 y);
public static native void BuildRectangleLine(CPrimitiveBuilder builder, @Cast("cvec3*") float[] center, @Cast("cvec3*") float[] x, @Cast("cvec3*") float[] y);

public static native @Cast("uint32_t") int BuilderNumPrimitives(CPrimitiveBuilder builder);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_PRIMITIVE_BUILDER_H


// Parsed from c/c_scene_manager.h

// #ifndef VKG_C_SCENE_MANAGER_H
// #define VKG_C_SCENE_MANAGER_H
// #include "c_camera.h"
// #include "c_primitive_builder.h"
// #include "c_material.h"
// #include "c_mesh.h"
// #include "c_node.h"
// #include "c_model.h"
// #include "c_model_instance.h"
// #include "c_light.h"
// #ifdef __cplusplus
// #else
//   #include <stdbool.h>
// #endif

public static native CCamera SceneGetCamera(CSceneManager scene);

public static native @Cast("uint32_t") int NewPrimitive(
  CSceneManager scene, cvec3 positions, @Cast("uint32_t") int numPositions, cvec3 normals,
  @Cast("uint32_t") int numNormals, cvec2 uvs, @Cast("uint32_t") int numUVs, @Cast("uint32_t*") IntPointer indices,
  @Cast("uint32_t") int numIndices, caabb aabb, @Cast("CPrimitiveTopology") long topology);
public static native @Cast("uint32_t") int NewPrimitive(
  CSceneManager scene, @Cast("cvec3*") float[] positions, @Cast("uint32_t") int numPositions, @Cast("cvec3*") float[] normals,
  @Cast("uint32_t") int numNormals, @Cast("cvec2*") float[] uvs, @Cast("uint32_t") int numUVs, @Cast("uint32_t*") IntBuffer indices,
  @Cast("uint32_t") int numIndices, @Cast("caabb*") float[] aabb, @Cast("CPrimitiveTopology") long topology);
public static native @Cast("uint32_t") int NewPrimitive(
  CSceneManager scene, cvec3 positions, @Cast("uint32_t") int numPositions, cvec3 normals,
  @Cast("uint32_t") int numNormals, cvec2 uvs, @Cast("uint32_t") int numUVs, @Cast("uint32_t*") int[] indices,
  @Cast("uint32_t") int numIndices, caabb aabb, @Cast("CPrimitiveTopology") long topology);
public static native @Cast("uint32_t") int NewPrimitive(
  CSceneManager scene, @Cast("cvec3*") float[] positions, @Cast("uint32_t") int numPositions, @Cast("cvec3*") float[] normals,
  @Cast("uint32_t") int numNormals, @Cast("cvec2*") float[] uvs, @Cast("uint32_t") int numUVs, @Cast("uint32_t*") IntPointer indices,
  @Cast("uint32_t") int numIndices, @Cast("caabb*") float[] aabb, @Cast("CPrimitiveTopology") long topology);
public static native @Cast("uint32_t") int NewPrimitive(
  CSceneManager scene, cvec3 positions, @Cast("uint32_t") int numPositions, cvec3 normals,
  @Cast("uint32_t") int numNormals, cvec2 uvs, @Cast("uint32_t") int numUVs, @Cast("uint32_t*") IntBuffer indices,
  @Cast("uint32_t") int numIndices, caabb aabb, @Cast("CPrimitiveTopology") long topology);
public static native @Cast("uint32_t") int NewPrimitive(
  CSceneManager scene, @Cast("cvec3*") float[] positions, @Cast("uint32_t") int numPositions, @Cast("cvec3*") float[] normals,
  @Cast("uint32_t") int numNormals, @Cast("cvec2*") float[] uvs, @Cast("uint32_t") int numUVs, @Cast("uint32_t*") int[] indices,
  @Cast("uint32_t") int numIndices, @Cast("caabb*") float[] aabb, @Cast("CPrimitiveTopology") long topology);

public static native void NewPrimitives(CSceneManager scene, CPrimitiveBuilder builder, @Cast("uint32_t*") IntPointer ptrs);
public static native void NewPrimitives(CSceneManager scene, CPrimitiveBuilder builder, @Cast("uint32_t*") IntBuffer ptrs);
public static native void NewPrimitives(CSceneManager scene, CPrimitiveBuilder builder, @Cast("uint32_t*") int[] ptrs);

public static native @Cast("uint32_t") int NewMaterial(CSceneManager scene, @Cast("CMaterialType") int type);
public static native @Cast("uint32_t") int NewMesh(CSceneManager scene, @Cast("uint32_t") int primitive, @Cast("uint32_t") int material);
public static native @Cast("uint32_t") int NewNode(CSceneManager scene, ctransform transform);
public static native @Cast("uint32_t") int NewNode(CSceneManager scene, @Cast("ctransform*") float[] transform);
public static native @Cast("uint32_t") int NewModel(CSceneManager scene, @Cast("uint32_t*") IntPointer nodes, @Cast("uint32_t") int numNodes);
public static native @Cast("uint32_t") int NewModel(CSceneManager scene, @Cast("uint32_t*") IntBuffer nodes, @Cast("uint32_t") int numNodes);
public static native @Cast("uint32_t") int NewModel(CSceneManager scene, @Cast("uint32_t*") int[] nodes, @Cast("uint32_t") int numNodes);
public static native @Cast("uint32_t") int NewTexture(CSceneManager scene, @Cast("const char*") BytePointer path, @Cast("bool") boolean mipmap);
public static native @Cast("uint32_t") int NewTexture(CSceneManager scene, String path, @Cast("bool") boolean mipmap);
public static native @Cast("uint32_t") int NewTextureFromBytes(
  CSceneManager scene, @Cast("const char*") BytePointer bytes, @Cast("uint32_t") int numBytes, @Cast("uint32_t") int width,
  @Cast("uint32_t") int height, @Cast("bool") boolean mipmap);
public static native @Cast("uint32_t") int NewTextureFromBytes(
  CSceneManager scene, String bytes, @Cast("uint32_t") int numBytes, @Cast("uint32_t") int width,
  @Cast("uint32_t") int height, @Cast("bool") boolean mipmap);
public static native @Cast("uint32_t") int NewLight(CSceneManager scene);
public static native @Cast("uint32_t") int SceneLoadModel(CSceneManager scene, @Cast("const char*") BytePointer path);
public static native @Cast("uint32_t") int SceneLoadModel(CSceneManager scene, String path);
public static native @Cast("uint32_t") int NewModelInstance(CSceneManager scene, @Cast("uint32_t") int model, ctransform transform);
public static native @Cast("uint32_t") int NewModelInstance(CSceneManager scene, @Cast("uint32_t") int model, @Cast("ctransform*") float[] transform);

// #ifdef __cplusplus
// #endif

// #endif //VKG_C_SCENE_MANAGER_H


// Parsed from c/c_atmosphere.h

// #ifndef VKG_C_ATMOSPHERE_H
// #define VKG_C_ATMOSPHERE_H
// #include "c_vec.h"

// #ifdef __cplusplus
// #else
//   #include <stdbool.h>
// #endif

@Opaque public static class CAtmosphere extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CAtmosphere() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CAtmosphere(Pointer p) { super(p); }
}

public static native void AtmosphereInit(
  CAtmosphere atmosphere, double kLengthUnitInMeters, double kSunAngularRadius);

public static native @Cast("bool") boolean AtmosphereIsEnabled(CAtmosphere atmosphere);
public static native double AtmosphereGetLengthUnitInMeters(CAtmosphere atmosphere);
public static native double AtmosphereGetEarthRadius(CAtmosphere atmosphere);
public static native void AtmosphereSetSunDirection(CAtmosphere atmosphere, cvec3 sunDirection);
public static native void AtmosphereSetSunDirection(CAtmosphere atmosphere, @Cast("cvec3*") float[] sunDirection);
public static native void AtmosphereGetSunDirection(CAtmosphere atmosphere, cvec3 sunDirection);
public static native void AtmosphereGetSunDirection(CAtmosphere atmosphere, @Cast("cvec3*") float[] sunDirection);
public static native void AtmosphereGetEarthCenter(CAtmosphere atmosphere, cvec3 earthCenter);
public static native void AtmosphereGetEarthCenter(CAtmosphere atmosphere, @Cast("cvec3*") float[] earthCenter);
public static native void AtmosphereSetEarthCenter(CAtmosphere atmosphere, cvec3 earthCenter);
public static native void AtmosphereSetEarthCenter(CAtmosphere atmosphere, @Cast("cvec3*") float[] earthCenter);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_ATMOSPHERE_H


// Parsed from vkez/window/input.h

// #ifndef VKG_INPUT_H
// #define VKG_INPUT_H
// #include <cstdint>
// #ifdef __cplusplus
// #endif

/** enum MouseButton */
public static final int
  MouseButtonLeft = 0,
  MouseButtonRight = 1,
  MouseButtonMiddle = 2,
  MouseButtonLast = MouseButtonMiddle;

/** enum Key */
public static final int
  KeySPACE = 0,
  KeyAPOSTROPHE = 1, /* ' */
  KeyCOMMA = 2,      /* , */
  KeyMINUS = 3,      /* - */
  KeyPERIOD = 4,     /* . */
  KeySLASH = 5,      /* / */
  Key0 = 6,
  Key1 = 7,
  Key2 = 8,
  Key3 = 9,
  Key4 = 10,
  Key5 = 11,
  Key6 = 12,
  Key7 = 13,
  Key8 = 14,
  Key9 = 15,
  KeySEMICOLON = 16, /* ; */
  KeyEQUAL = 17,     /* = */
  KeyA = 18,
  KeyB = 19,
  KeyC = 20,
  KeyD = 21,
  KeyE = 22,
  KeyF = 23,
  KeyG = 24,
  KeyH = 25,
  KeyI = 26,
  KeyJ = 27,
  KeyK = 28,
  KeyL = 29,
  KeyM = 30,
  KeyN = 31,
  KeyO = 32,
  KeyP = 33,
  KeyQ = 34,
  KeyR = 35,
  KeyS = 36,
  KeyT = 37,
  KeyU = 38,
  KeyV = 39,
  KeyW = 40,
  KeyX = 41,
  KeyY = 42,
  KeyZ = 43,
  KeyLEFT_BRACKET = 44,  /* [ */
  KeyBACKSLASH = 45,     /* \ */
  KeyRIGHT_BRACKET = 46, /* ] */
  KeyGRAVE_ACCENT = 47,  /* ` */
  KeyWORLD_1 = 48,       /* non-US #1 */
  KeyWORLD_2 = 49,       /* non-US #2 */

  /* FunctionKeys */
  KeyESCAPE = 50,
  KeyENTER = 51,
  KeyTAB = 52,
  KeyBACKSPACE = 53,
  KeyINSERT = 54,
  KeyDELETE = 55,
  KeyRIGHT = 56,
  KeyLEFT = 57,
  KeyDOWN = 58,
  KeyUP = 59,
  KeyPAGE_UP = 60,
  KeyPAGE_DOWN = 61,
  KeyHOME = 62,
  KeyEND = 63,
  KeyCAPS_LOCK = 64,
  KeySCROLL_LOCK = 65,
  KeyNUM_LOCK = 66,
  KeyPRINT_SCREEN = 67,
  KeyPAUSE = 68,
  KeyF1 = 69,
  KeyF2 = 70,
  KeyF3 = 71,
  KeyF4 = 72,
  KeyF5 = 73,
  KeyF6 = 74,
  KeyF7 = 75,
  KeyF8 = 76,
  KeyF9 = 77,
  KeyF10 = 78,
  KeyF11 = 79,
  KeyF12 = 80,
  KeyF13 = 81,
  KeyF14 = 82,
  KeyF15 = 83,
  KeyF16 = 84,
  KeyF17 = 85,
  KeyF18 = 86,
  KeyF19 = 87,
  KeyF20 = 88,
  KeyF21 = 89,
  KeyF22 = 90,
  KeyF23 = 91,
  KeyF24 = 92,
  KeyF25 = 93,
  KeyKP_0 = 94,
  KeyKP_1 = 95,
  KeyKP_2 = 96,
  KeyKP_3 = 97,
  KeyKP_4 = 98,
  KeyKP_5 = 99,
  KeyKP_6 = 100,
  KeyKP_7 = 101,
  KeyKP_8 = 102,
  KeyKP_9 = 103,
  KeyKP_DECIMAL = 104,
  KeyKP_DIVIDE = 105,
  KeyKP_MULTIPLY = 106,
  KeyKP_SUBTRACT = 107,
  KeyKP_ADD = 108,
  KeyKP_ENTER = 109,
  KeyKP_EQUAL = 110,
  KeyLEFT_SHIFT = 111,
  KeyLEFT_CONTROL = 112,
  KeyLEFT_ALT = 113,
  KeyLEFT_SUPER = 114,
  KeyRIGHT_SHIFT = 115,
  KeyRIGHT_CONTROL = 116,
  KeyRIGHT_ALT = 117,
  KeyRIGHT_SUPER = 118,
  KeyMENU = 119,
  KeyLast = KeyMENU;

public static class Input extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public Input() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Input(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Input(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public Input position(long position) {
        return (Input)super.position(position);
    }

  public native int mousePosX(); public native Input mousePosX(int setter);
  public native int mousePosY(); public native Input mousePosY(int setter);
  public native double scrollXOffset(); public native Input scrollXOffset(double setter);
  public native double scrollYOffset(); public native Input scrollYOffset(double setter);
  public native @Cast("bool") boolean mouseButtonPressed(int i); public native Input mouseButtonPressed(int i, boolean setter);
  @MemberGetter public native @Cast("bool*") BoolPointer mouseButtonPressed();
  public native @Cast("bool") boolean keyPressed(int i); public native Input keyPressed(int i, boolean setter);
  @MemberGetter public native @Cast("bool*") BoolPointer keyPressed();
}

// #ifdef __cplusplus
// #endif
// #endif //VKG_INPUT_H

// Parsed from c/c_panning_camera.h

// #ifndef VKG_C_PANNING_CAMERA_H
// #define VKG_C_PANNING_CAMERA_H
// #include "c_camera.h"
// #include "vkez/window/input.h"
// #include <cstdint>
// #include "c_vec.h"
// #ifdef __cplusplus
// #endif

@Opaque public static class CPanningCamera extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CPanningCamera() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CPanningCamera(Pointer p) { super(p); }
}

public static native CPanningCamera NewPanningCamera(CCamera camera);
public static native void DeletePanningCamera(CPanningCamera camera);
public static native void PanningCameraUpdate(CPanningCamera camera, Input input);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_PANNING_CAMERA_H


// Parsed from c/c_window.h

// #ifndef VKG_C_WINDOW_H
// #define VKG_C_WINDOW_H
// #include "vkez/window/input.h"
// #include <cstdint>
// #ifdef __cplusplus
// #endif

@Opaque public static class CWindow extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CWindow() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CWindow(Pointer p) { super(p); }
}

public static native @Cast("uint32_t") int WindowGetWidth(CWindow window);
public static native @Cast("uint32_t") int WindowGetHeight(CWindow window);
public static native void WindowSetTitle(CWindow window, @Cast("const char*") BytePointer title);
public static native void WindowSetTitle(CWindow window, String title);
public static native Input WindowGetInput(CWindow window);

public static native int InputMousePosX(Input input);
public static native int InputMousePosY(Input input);
public static native double InputScrollOffsetX(Input input);
public static native double InputScrollOffsety(Input input);
public static native @Cast("bool") boolean InputMouseButtonPressed(Input input, @Cast("MouseButton") int btn);
public static native @Cast("bool") boolean InputKeyPressed(Input input, @Cast("Key") int key);

// #ifdef __cplusplus
// #endif

// #endif //VKG_C_WINDOW_H


// Parsed from vkez/call_frame_updater.h

// #pragma once

public static class CallFrameUpdater extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CallFrameUpdater() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CallFrameUpdater(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CallFrameUpdater(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CallFrameUpdater position(long position) {
        return (CallFrameUpdater)super.position(position);
    }

  @Virtual public native void update(double elapsedDuration);
}


// Parsed from c/c_renderer.h

// #ifndef VKG_C_RENDERER_H
// #define VKG_C_RENDERER_H

// #include <cstdint>
// #include "c_scene_manager.h"
// #include "c_atmosphere.h"
// #include "c_window.h"

// #ifdef __cplusplus
// #else
//   #include <stdbool.h>
// #endif

public static class CWindowConfig extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CWindowConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CWindowConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CWindowConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CWindowConfig position(long position) {
        return (CWindowConfig)super.position(position);
    }

  public native @Cast("const char*") BytePointer title(); public native CWindowConfig title(BytePointer setter);
  public native @Cast("uint32_t") int width(); public native CWindowConfig width(int setter);
  public native @Cast("uint32_t") int height(); public native CWindowConfig height(int setter);
  public native @Cast("bool") boolean fullscreen(); public native CWindowConfig fullscreen(boolean setter);
  public native @Cast("bool") boolean vsync(); public native CWindowConfig vsync(boolean setter);
  public native @Cast("uint32_t") int numFrames(); public native CWindowConfig numFrames(int setter);
}

public static class CFeatureConfig extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CFeatureConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CFeatureConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CFeatureConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CFeatureConfig position(long position) {
        return (CFeatureConfig)super.position(position);
    }

  public native @Cast("bool") boolean atmosphere(); public native CFeatureConfig atmosphere(boolean setter);
  public native @Cast("bool") boolean validationLayer(); public native CFeatureConfig validationLayer(boolean setter);
}

@Opaque public static class CRenderer extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CRenderer() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CRenderer(Pointer p) { super(p); }
}

public static class CDeferredSceneConfig extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CDeferredSceneConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CDeferredSceneConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CDeferredSceneConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CDeferredSceneConfig position(long position) {
        return (CDeferredSceneConfig)super.position(position);
    }

  /**max number of static vertices and indices*/
  public native @Cast("uint32_t") int maxNumVertex(); public native CDeferredSceneConfig maxNumVertex(int setter);
  public native @Cast("uint32_t") int maxNumIndex(); public native CDeferredSceneConfig maxNumIndex(int setter);
  /**max number of static model instances*/
  public native @Cast("uint32_t") int maxNumTransform(); public native CDeferredSceneConfig maxNumTransform(int setter);
  /**max number of static materials*/
  public native @Cast("uint32_t") int maxNumMaterial(); public native CDeferredSceneConfig maxNumMaterial(int setter);
  /**max number of static mesh instances*/
  public native @Cast("uint32_t") int maxNumMeshes(); public native CDeferredSceneConfig maxNumMeshes(int setter);
  public native @Cast("uint32_t") int maxNumLineMeshes(); public native CDeferredSceneConfig maxNumLineMeshes(int setter);
  public native @Cast("uint32_t") int maxNumTransparentMeshes(); public native CDeferredSceneConfig maxNumTransparentMeshes(int setter);
  public native @Cast("uint32_t") int maxNumTransparentLineMeshes(); public native CDeferredSceneConfig maxNumTransparentLineMeshes(int setter);
  /**max number of texture including 2d and cube map.*/
  public native @Cast("uint32_t") int maxNumTexture(); public native CDeferredSceneConfig maxNumTexture(int setter);
  /**max number of lights*/
  public native @Cast("uint32_t") int maxNumLights(); public native CDeferredSceneConfig maxNumLights(int setter);

  public native @Cast("uint32_t") int sampleCount(); public native CDeferredSceneConfig sampleCount(int setter);
}

public static class CRayTracingSceneConfig extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CRayTracingSceneConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CRayTracingSceneConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CRayTracingSceneConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CRayTracingSceneConfig position(long position) {
        return (CRayTracingSceneConfig)super.position(position);
    }

  /**max number of static vertices and indices*/
  public native @Cast("uint32_t") int maxNumVertex(); public native CRayTracingSceneConfig maxNumVertex(int setter);
  public native @Cast("uint32_t") int maxNumIndex(); public native CRayTracingSceneConfig maxNumIndex(int setter);
  /**max number of static model instances*/
  public native @Cast("uint32_t") int maxNumTransform(); public native CRayTracingSceneConfig maxNumTransform(int setter);
  /**max number of static materials*/
  public native @Cast("uint32_t") int maxNumMaterial(); public native CRayTracingSceneConfig maxNumMaterial(int setter);
  /**max number of static mesh instances*/
  public native @Cast("uint32_t") int maxNumMeshes(); public native CRayTracingSceneConfig maxNumMeshes(int setter);
  public native @Cast("uint32_t") int maxNumLineMeshes(); public native CRayTracingSceneConfig maxNumLineMeshes(int setter);
  public native @Cast("uint32_t") int maxNumTransparentMeshes(); public native CRayTracingSceneConfig maxNumTransparentMeshes(int setter);
  public native @Cast("uint32_t") int maxNumTransparentLineMeshes(); public native CRayTracingSceneConfig maxNumTransparentLineMeshes(int setter);
  /**max number of texture including 2d and cube map.*/
  public native @Cast("uint32_t") int maxNumTexture(); public native CRayTracingSceneConfig maxNumTexture(int setter);
  /**max number of lights*/
  public native @Cast("uint32_t") int maxNumLights(); public native CRayTracingSceneConfig maxNumLights(int setter);

  public native @Cast("uint32_t") int sampleCount(); public native CRayTracingSceneConfig sampleCount(int setter);
  public native @Cast("uint32_t") int maxRecursion(); public native CRayTracingSceneConfig maxRecursion(int setter);
}

public static class CPathTracingSceneConfig extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CPathTracingSceneConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CPathTracingSceneConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CPathTracingSceneConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CPathTracingSceneConfig position(long position) {
        return (CPathTracingSceneConfig)super.position(position);
    }

  /**max number of static vertices and indices*/
  public native @Cast("uint32_t") int maxNumVertex(); public native CPathTracingSceneConfig maxNumVertex(int setter);
  public native @Cast("uint32_t") int maxNumIndex(); public native CPathTracingSceneConfig maxNumIndex(int setter);
  /**max number of static model instances*/
  public native @Cast("uint32_t") int maxNumTransform(); public native CPathTracingSceneConfig maxNumTransform(int setter);
  /**max number of static materials*/
  public native @Cast("uint32_t") int maxNumMaterial(); public native CPathTracingSceneConfig maxNumMaterial(int setter);
  /**max number of static mesh instances*/
  public native @Cast("uint32_t") int maxNumMeshes(); public native CPathTracingSceneConfig maxNumMeshes(int setter);
  public native @Cast("uint32_t") int maxNumLineMeshes(); public native CPathTracingSceneConfig maxNumLineMeshes(int setter);
  public native @Cast("uint32_t") int maxNumTransparentMeshes(); public native CPathTracingSceneConfig maxNumTransparentMeshes(int setter);
  public native @Cast("uint32_t") int maxNumTransparentLineMeshes(); public native CPathTracingSceneConfig maxNumTransparentLineMeshes(int setter);
  /**max number of texture including 2d and cube map.*/
  public native @Cast("uint32_t") int maxNumTexture(); public native CPathTracingSceneConfig maxNumTexture(int setter);
  /**max number of lights*/
  public native @Cast("uint32_t") int maxNumLights(); public native CPathTracingSceneConfig maxNumLights(int setter);

  public native @Cast("uint32_t") int sampleCount(); public native CPathTracingSceneConfig sampleCount(int setter);
  public native @Cast("uint32_t") int maxRecursion(); public native CPathTracingSceneConfig maxRecursion(int setter);
}

public static native CRenderer NewBasicRenderer(@ByVal CWindowConfig windowConfig, @ByVal CFeatureConfig featureConfig);
public static native void DeleteBasicRenderer(CRenderer renderer);

public static native CRenderer NewDeferredRenderer(
  @ByVal CWindowConfig windowConfig, @ByVal CFeatureConfig featureConfig,
  @ByVal CDeferredSceneConfig sceneConfig);
public static native void DeleteDeferredRenderer(CRenderer renderer);

public static native CRenderer NewRayTracingRenderer(
  @ByVal CWindowConfig windowConfig, @ByVal CFeatureConfig featureConfig,
  @ByVal CRayTracingSceneConfig sceneConfig);
public static native void DeleteRayTracingRenderer(CRenderer renderer);

public static native CRenderer NewPathTracingRenderer(
  @ByVal CWindowConfig windowConfig, @ByVal CFeatureConfig featureConfig,
  @ByVal CPathTracingSceneConfig sceneConfig);
public static native void DeletePathTracingRenderer(CRenderer renderer);

public static native void RendererGetFeatureConfig(CRenderer renderer,CFeatureConfig featureConfig);
public static native CSceneManager RendererGetSceneManager(CRenderer renderer);
public static native CAtmosphere RendererGetAtmosphere(CRenderer renderer);
public static native CWindow RendererGetWindow(CRenderer renderer);
public static native @Cast("bool") boolean RendererGetWireFrame(CRenderer renderer);
public static native void RendererSetWireFrame(CRenderer renderer, @Cast("bool") boolean wireframe);

public static class CUpdater extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    CUpdater(Pointer p) { super(p); }
    protected CUpdater() { allocate(); }
    private native void allocate();
    public native void call(double arg0, Pointer arg1);
}
public static native void RendererLoopFuncPtr(CRenderer renderer, CUpdater updater, Pointer data);

@Opaque public static class CCallFrameUpdater extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CCallFrameUpdater() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CCallFrameUpdater(Pointer p) { super(p); }
}
public static native void RendererLoopUpdater(CRenderer renderer, CCallFrameUpdater updater);

// #ifdef __cplusplus
// #endif
// #endif //VKG_C_RENDERER_H


}
